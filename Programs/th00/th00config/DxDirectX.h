// ----------------------------------------------------------------------------
//
//		ÇcÇwÉâÉCÉuÉâÉä		DirectX ä÷òAíËã`ópÉwÉbÉ_ÉtÉ@ÉCÉã
//
//				Ver2.25
//
// ----------------------------------------------------------------------------

// ëΩèdÉCÉìÉNÉãÅ[Éhñhé~ópÉ}ÉNÉç
#ifndef __DXDIRECTX_H__
#define __DXDIRECTX_H__

#ifdef DX_USE_DIRECTX_SDK_FILE
	#include <dinput.h>
	#include <ddraw.h>
	#include <d3d.h>
//	#ifndef DX_NON_MOVIE
//		#include <dshow.h>
//	#endif
//	#include <qedit.h>
//	#include <stdio.h>
	#include <dsound.h>
	#include <dmusici.h>
	
	#define D_HMONITOR								HMONITOR

	// ÇcÇâÇíÇÖÇÉÇîÇrÇèÇïÇéÇÑ -----------------------------------------------------

	#define D_DS_OK									DS_OK

	#define D_DSBVOLUME_MIN							DSBVOLUME_MIN
	#define D_DSBVOLUME_MAX							DSBVOLUME_MAX

	#define D_DSSCL_NORMAL							DSSCL_NORMAL
	#define D_DSSCL_PRIORITY						DSSCL_PRIORITY
	#define D_DSSCL_EXCLUSIVE						DSSCL_EXCLUSIVE
	#define D_DSSCL_WRITEPRIMARY					DSSCL_WRITEPRIMARY

	#define D_DSBPLAY_LOOPING						DSBPLAY_LOOPING
	#define D_DSBSTATUS_PLAYING						DSBSTATUS_PLAYING
	#define D_DSBFREQUENCY_ORIGINAL					DSBFREQUENCY_ORIGINAL

	#define D_DSBCAPS_PRIMARYBUFFER					DSBCAPS_PRIMARYBUFFER
	#define D_DSBCAPS_STATIC						DSBCAPS_STATIC
	#define D_DSBCAPS_CTRLFREQUENCY					DSBCAPS_CTRLFREQUENCY
	#define D_DSBCAPS_CTRLPAN						DSBCAPS_CTRLPAN
	#define D_DSBCAPS_CTRLVOLUME					DSBCAPS_CTRLVOLUME
	#define D_DSBCAPS_GLOBALFOCUS					DSBCAPS_GLOBALFOCUS
	#define D_DSBCAPS_GETCURRENTPOSITION2			DSBCAPS_GETCURRENTPOSITION2

	#define D_DSCAPS_PRIMARYMONO					DSCAPS_PRIMARYMONO
	#define D_DSCAPS_PRIMARYSTEREO					DSCAPS_PRIMARYSTEREO
	#define D_DSCAPS_PRIMARY8BIT					DSCAPS_PRIMARY8BIT
	#define D_DSCAPS_PRIMARY16BIT					DSCAPS_PRIMARY16BIT
	#define D_DSCAPS_SECONDARYMONO					DSCAPS_SECONDARYMONO
	#define D_DSCAPS_SECONDARYSTEREO				DSCAPS_SECONDARYSTEREO
	#define D_DSCAPS_SECONDARY8BIT					DSCAPS_SECONDARY8BIT
	#define D_DSCAPS_SECONDARY16BIT					DSCAPS_SECONDARY16BIT

	#define D_DSCAPS								DSCAPS
	#define D_DSBUFFERDESC							DSBUFFERDESC
	#define D_DSBPOSITIONNOTIFY						DSBPOSITIONNOTIFY
	#define LPD_DSENUMCALLBACKA						LPDSENUMCALLBACKA
	#define LPD_DSENUMCALLBACKW						LPDSENUMCALLBACKW
	#define D_IDirectSound							IDirectSound
	#define D_IDirectSound8							IDirectSound8
	#define D_IDirectSoundBuffer					IDirectSoundBuffer
	#define D_IDirectSoundBuffer8					IDirectSoundBuffer8
	#define D_IDirectSoundNotify					IDirectSoundNotify

	// ÇcÇâÇíÇÖÇÉÇîÇlÇïÇìÇâÇÉ -----------------------------------------------------

	#define D_DMUS_APATH_SHARED_STEREOPLUSREVERB	DMUS_APATH_SHARED_STEREOPLUSREVERB
	#define D_DMUS_AUDIOF_ALL						DMUS_AUDIOF_ALL
	#define D_DMUS_PC_OUTPUTCLASS					DMUS_PC_OUTPUTCLASS
	#define D_DMUS_SEG_REPEAT_INFINITE				DMUS_SEG_REPEAT_INFINITE

	#define D_DMUS_MAX_DESCRIPTION					DMUS_MAX_DESCRIPTION
	#define D_DMUS_MAX_CATEGORY						DMUS_MAX_CATEGORY
	#define D_DMUS_MAX_NAME							DMUS_MAX_NAME
	#define D_DMUS_MAX_FILENAME						DMUS_MAX_FILENAME

	#define D_DMUS_AUDIOPARAMS_FEATURES				DMUS_AUDIOPARAMS_FEATURES
	#define D_DMUS_AUDIOPARAMS_SAMPLERATE			DMUS_AUDIOPARAMS_SAMPLERATE
	#define D_DMUS_AUDIOPARAMS_DEFAULTSYNTH			DMUS_AUDIOPARAMS_DEFAULTSYNTH

	#define D_DMUS_OBJ_CLASS						DMUS_OBJ_CLASS
	#define D_DMUS_OBJ_MEMORY						DMUS_OBJ_MEMORY
	
	#define D_DMUS_SEGF_REFTIME						DMUS_SEGF_REFTIME
	#define D_MUSIC_TIME							MUSIC_TIME
	#define D_REFERENCE_TIME						REFERENCE_TIME
	
	#define D_DMUS_PORTCAPS							DMUS_PORTCAPS
	#define D_DMUS_VERSION							DMUS_VERSION
	#define D_DMUS_OBJECTDESC						DMUS_OBJECTDESC
	#define D_DMUS_AUDIOPARAMS						DMUS_AUDIOPARAMS
	
	#define D_IDirectMusic							IDirectMusic
	#define D_IDirectMusic8							IDirectMusic8
	#define D_IDirectMusicSegmentState				IDirectMusicSegmentState
	#define D_IDirectMusicSegment					IDirectMusicSegment
	#define D_IDirectMusicSegment8					IDirectMusicSegment8
	#define D_IDirectMusicLoader					IDirectMusicLoader
	#define D_IDirectMusicLoader8					IDirectMusicLoader8
	#define D_IDirectMusicPerformance				IDirectMusicPerformance
	#define D_IDirectMusicPerformance8				IDirectMusicPerformance8

	// ÇcÇâÇíÇÖÇÉÇîÇcÇíÇÅÇó -------------------------------------------------------

	#define D_DD_OK									DD_OK

	#define D_DD_ROP_SPACE							DD_ROP_SPACE
	#define D_MAX_DDDEVICEID_STRING					MAX_DDDEVICEID_STRING

	#define D_DDPF_ALPHAPIXELS						DDPF_ALPHAPIXELS
	#define D_DDPF_ALPHA							DDPF_ALPHA
	#define D_DDPF_FOURCC							DDPF_FOURCC
	#define D_DDPF_RGB								DDPF_RGB
	#define D_DDPF_ZBUFFER							DDPF_ZBUFFER
	#define D_DDPF_LUMINANCE						DDPF_LUMINANCE
	#define D_DDPF_BUMPLUMINANCE					DDPF_BUMPLUMINANCE
	#define D_DDPF_BUMPDUDV							DDPF_BUMPDUDV
	#define D_DDPF_RGBTOYUV							DDPF_RGBTOYUV
	#define D_DDPF_YUV								DDPF_YUV

	#define D_DDWAITVB_BLOCKBEGIN					DDWAITVB_BLOCKBEGIN

	#define D_DDCAPS_ALIGNBOUNDARYDEST				DDCAPS_ALIGNBOUNDARYDEST
	#define D_DDCAPS_ALIGNSIZEDEST					DDCAPS_ALIGNSIZEDEST
	#define D_DDCAPS_ALIGNBOUNDARYSRC				DDCAPS_ALIGNBOUNDARYSRC
	#define D_DDCAPS_ALIGNSIZESRC					DDCAPS_ALIGNSIZESRC

	#define D_DDENUMSURFACES_ALL					DDENUMSURFACES_ALL
	#define D_DDENUMSURFACES_MATCH					DDENUMSURFACES_MATCH
	#define D_DDENUMSURFACES_NOMATCH				DDENUMSURFACES_NOMATCH
	#define D_DDENUMSURFACES_CANBECREATED			DDENUMSURFACES_CANBECREATED
	#define D_DDENUMSURFACES_DOESEXIST				DDENUMSURFACES_DOESEXIST

	#define D_DDOVER_SHOW							DDOVER_SHOW
	#define D_DDOVER_HIDE							DDOVER_HIDE

	#define D_DDSCAPS_BACKBUFFER					DDSCAPS_BACKBUFFER
	#define D_DDSCAPS_COMPLEX						DDSCAPS_COMPLEX
	#define D_DDSCAPS_FLIP							DDSCAPS_FLIP
	#define D_DDSCAPS_OFFSCREENPLAIN				DDSCAPS_OFFSCREENPLAIN
	#define D_DDSCAPS_OVERLAY						DDSCAPS_OVERLAY
	#define D_DDSCAPS_PRIMARYSURFACE				DDSCAPS_PRIMARYSURFACE
	#define D_DDSCAPS_SYSTEMMEMORY					DDSCAPS_SYSTEMMEMORY
	#define D_DDSCAPS_TEXTURE						DDSCAPS_TEXTURE
	#define D_DDSCAPS_3DDEVICE						DDSCAPS_3DDEVICE
	#define D_DDSCAPS_VIDEOMEMORY					DDSCAPS_VIDEOMEMORY
	#define D_DDSCAPS_ZBUFFER						DDSCAPS_ZBUFFER
	#define D_DDSCAPS_LOCALVIDMEM					DDSCAPS_LOCALVIDMEM

	#define D_DDCKEY_SRCBLT							DDCKEY_SRCBLT

	#define D_DDFLIP_NOVSYNC						DDFLIP_NOVSYNC
	#define D_DDFLIP_WAIT							DDFLIP_WAIT

	#define D_DDPCAPS_8BIT							DDPCAPS_8BIT

	#define D_DDSCAPS2_TEXTUREMANAGE				DDSCAPS2_TEXTUREMANAGE

	#define D_DDBLT_COLORFILL						DDBLT_COLORFILL
	#define D_DDBLT_WAIT							DDBLT_WAIT
	#define D_DDBLT_DEPTHFILL						DDBLT_DEPTHFILL

	#define D_DDENUM_ATTACHEDSECONDARYDEVICES		DDENUM_ATTACHEDSECONDARYDEVICES
	#define D_DDENUMRET_CANCEL						DDENUMRET_CANCEL
	#define D_DDENUMRET_OK							DDENUMRET_OK

	#define D_DDLOCK_WAIT							DDLOCK_WAIT
	#define D_DDLOCK_READONLY						DDLOCK_READONLY
	#define D_DDLOCK_WRITEONLY						DDLOCK_WRITEONLY
	#define D_DDLOCK_NOSYSLOCK						DDLOCK_NOSYSLOCK

	#define D_DDBLTFAST_NOCOLORKEY					DDBLTFAST_NOCOLORKEY
	#define D_DDBLTFAST_SRCCOLORKEY					DDBLTFAST_SRCCOLORKEY
	#define D_DDBLTFAST_DESTCOLORKEY				DDBLTFAST_DESTCOLORKEY
	#define D_DDBLTFAST_WAIT						DDBLTFAST_WAIT
	#define D_DDBLTFAST_DONOTWAIT					DDBLTFAST_DONOTWAIT

	#define D_DDSD_CAPS								DDSD_CAPS
	#define D_DDSD_HEIGHT							DDSD_HEIGHT
	#define D_DDSD_WIDTH							DDSD_WIDTH
	#define D_DDSD_PITCH							DDSD_PITCH
	#define D_DDSD_BACKBUFFERCOUNT					DDSD_BACKBUFFERCOUNT
	#define D_DDSD_PIXELFORMAT						DDSD_PIXELFORMAT
	#define D_DDSD_TEXTURESTAGE						DDSD_TEXTURESTAGE

	#define D_DDBD_16								DDBD_16
	#define D_DDBD_32								DDBD_32

	#define D_DDSCL_FULLSCREEN						DDSCL_FULLSCREEN
	#define D_DDSCL_NORMAL							DDSCL_NORMAL
	#define D_DDSCL_EXCLUSIVE						DDSCL_EXCLUSIVE
	#define D_DDSCL_MULTITHREADED					DDSCL_MULTITHREADED

	#define D_DDERR_SURFACEBUSY						DDERR_SURFACEBUSY
	#define D_DDERR_SURFACELOST						DDERR_SURFACELOST
	#define D_DDERR_HWNDSUBCLASSED					DDERR_HWNDSUBCLASSED
	#define D_DDERR_HWNDALREADYSET					DDERR_HWNDALREADYSET
	#define D_DDERR_EXCLUSIVEMODEALREADYSET			DDERR_EXCLUSIVEMODEALREADYSET
	
	#define D_DDSCAPS2								DDSCAPS2
	#define D_DDSCAPS								DDSCAPS
	#define D_DDCAPS								DDCAPS
	#define D_DDPIXELFORMAT							DDPIXELFORMAT
	#define D_DDCOLORKEY							DDCOLORKEY
	#define D_DDSURFACEDESC							DDSURFACEDESC
	#define D_DDSURFACEDESC2						DDSURFACEDESC2
	#define D_DDDEVICEIDENTIFIER2					DDDEVICEIDENTIFIER2
	#define D_DDBLTFX								DDBLTFX
	#define D_DDOVERLAYFX							DDOVERLAYFX

	#define LPD_DDENUMSURFACESCALLBACK7				LPDDENUMSURFACESCALLBACK7
	#define LPD_DDENUMSURFACESCALLBACK2				LPDDENUMSURFACESCALLBACK2
	#define LPD_DDENUMSURFACESCALLBACK				LPDDENUMSURFACESCALLBACK
	#define LPD_DDENUMCALLBACKEXA					LPDDENUMCALLBACKEXA
	#define LPD_DDENUMCALLBACKEXW					LPDDENUMCALLBACKEXW
	
	#define D_IDirectDraw							IDirectDraw
	#define D_IDirectDraw2							IDirectDraw2
	#define D_IDirectDraw4							IDirectDraw4
	#define D_IDirectDraw7							IDirectDraw7
	#define D_IDirectDrawSurface					IDirectDrawSurface
	#define D_IDirectDrawSurface2					IDirectDrawSurface2
	#define D_IDirectDrawSurface3					IDirectDrawSurface3
	#define D_IDirectDrawSurface4					IDirectDrawSurface4
	#define D_IDirectDrawSurface7					IDirectDrawSurface7
	#define D_IDirectDrawClipper					IDirectDrawClipper
	#define D_IDirectDrawPalette					IDirectDrawPalette

	// ÇcÇâÇíÇÖÇÉÇîÇRÇc -----------------------------------------------------------

	#define D_D3D_OK								D3D_OK

	#define D_D3DENUMRET_CANCEL						D3DENUMRET_CANCEL
	#define D_D3DENUMRET_OK							D3DENUMRET_OK

	#define D_D3DPTEXTURECAPS_POW2					D3DPTEXTURECAPS_POW2
	#define D_D3DPTEXTURECAPS_SQUAREONLY			D3DPTEXTURECAPS_SQUAREONLY

	#define D_D3DTA_DIFFUSE							D3DTA_DIFFUSE
	#define D_D3DTA_TEXTURE							D3DTA_TEXTURE
	#define D_D3DTA_TFACTOR							D3DTA_TFACTOR
	#define D_D3DTA_CURRENT							D3DTA_CURRENT
	#define D_D3DTA_SPECULAR						D3DTA_SPECULAR
	#define D_D3DTA_COMPLEMENT						D3DTA_COMPLEMENT

	#define D_D3DFVF_XYZ							D3DFVF_XYZ
	#define D_D3DFVF_XYZRHW							D3DFVF_XYZRHW
	#define D_D3DFVF_NORMAL							D3DFVF_NORMAL
	#define D_D3DFVF_DIFFUSE						D3DFVF_DIFFUSE
	#define D_D3DFVF_SPECULAR						D3DFVF_SPECULAR
	#define D_D3DFVF_TEX1							D3DFVF_TEX1
	#define D_D3DFVF_TEX2							D3DFVF_TEX2
	#define D_D3DFVF_TEX3							D3DFVF_TEX3
	#define D_D3DFVF_TEX4							D3DFVF_TEX4
	#define D_D3DFVF_TEX5							D3DFVF_TEX5
	#define D_D3DFVF_TEX6							D3DFVF_TEX6
	#define D_D3DFVF_TEX7							D3DFVF_TEX7
	#define D_D3DFVF_TEX8							D3DFVF_TEX8
	#define D_D3DFVF_XYZB1							D3DFVF_XYZB1
	#define D_D3DFVF_XYZB2							D3DFVF_XYZB2
	#define D_D3DFVF_XYZB3							D3DFVF_XYZB3
	#define D_D3DFVF_XYZB4							D3DFVF_XYZB4
	#define D_D3DFVF_XYZB5							D3DFVF_XYZB5

	#define D_D3DVBCAPS_SYSTEMMEMORY				D3DVBCAPS_SYSTEMMEMORY
	#define D_D3DVBCAPS_WRITEONLY					D3DVBCAPS_WRITEONLY
	#define D_D3DVBCAPS_OPTIMIZED					D3DVBCAPS_OPTIMIZED
	#define D_D3DVBCAPS_DONOTCLIP					D3DVBCAPS_DONOTCLIP

	#define D_RGBA_MAKE(r, g, b, a)					RGBA_MAKE(r, g, b, a)
	
	#define D_D3DCULL_NONE							D3DCULL_NONE
	#define D_D3DCULL_CW							D3DCULL_CW
	#define D_D3DCULL_CCW							D3DCULL_CCW
	#define D_D3DCULL								D3DCULL

	#define D_D3DVBLEND_DISABLE						D3DVBLEND_DISABLE
	#define D_D3DVBLEND_1WEIGHT						D3DVBLEND_1WEIGHT
	#define D_D3DVBLEND_2WEIGHTS					D3DVBLEND_2WEIGHTS
	#define D_D3DVBLEND_3WEIGHTS					D3DVBLEND_3WEIGHTS
	#define D_D3DVERTEXBLENDFLAGS					D3DVERTEXBLENDFLAGS

	#define D_D3DZBUFFERTYPE						D3DZBUFFERTYPE
	#define D_D3DZB_FALSE							D3DZB_FALSE
	#define D_D3DZB_TRUE							D3DZB_TRUE
	#define D_D3DZB_USEW							D3DZB_USEW

	#define D_D3DBLEND								D3DBLEND
	#define D_D3DBLEND_ZERO							D3DBLEND_ZERO
	#define D_D3DBLEND_ONE							D3DBLEND_ONE
	#define D_D3DBLEND_SRCCOLOR						D3DBLEND_SRCCOLOR
	#define D_D3DBLEND_INVSRCCOLOR					D3DBLEND_INVSRCCOLOR
	#define D_D3DBLEND_SRCALPHA						D3DBLEND_SRCALPHA
	#define D_D3DBLEND_INVSRCALPHA					D3DBLEND_INVSRCALPHA
	#define D_D3DBLEND_DESTALPHA					D3DBLEND_DESTALPHA
	#define D_D3DBLEND_INVDESTALPHA					D3DBLEND_INVDESTALPHA
	#define D_D3DBLEND_DESTCOLOR					D3DBLEND_DESTCOLOR
	#define D_D3DBLEND_INVDESTCOLOR					D3DBLEND_INVDESTCOLOR
	#define D_D3DBLEND_SRCALPHASAT					D3DBLEND_SRCALPHASAT
	#define D_D3DBLEND_BOTHSRCALPHA					D3DBLEND_BOTHSRCALPHA
	#define D_D3DBLEND_BOTHINVSRCALPHA				D3DBLEND_BOTHINVSRCALPHA

	#define D_D3DTEXTUREOP							D3DTEXTUREOP
	#define D_D3DTOP_DISABLE						D3DTOP_DISABLE
	#define D_D3DTOP_SELECTARG1						D3DTOP_SELECTARG1
	#define D_D3DTOP_SELECTARG2						D3DTOP_SELECTARG2

	#define D_D3DTOP_MODULATE						D3DTOP_MODULATE
	#define D_D3DTOP_MODULATE2X						D3DTOP_MODULATE2X
	#define D_D3DTOP_MODULATE4X						D3DTOP_MODULATE4X

	#define D_D3DTOP_ADD							D3DTOP_ADD
	#define D_D3DTOP_ADDSIGNED						D3DTOP_ADDSIGNED
	#define D_D3DTOP_ADDSIGNED2X					D3DTOP_ADDSIGNED2X
	#define D_D3DTOP_SUBTRACT						D3DTOP_SUBTRACT
	#define D_D3DTOP_ADDSMOOTH						D3DTOP_ADDSMOOTH

	#define D_D3DTOP_BLENDDIFFUSEALPHA				D3DTOP_BLENDDIFFUSEALPHA
	#define D_D3DTOP_BLENDTEXTUREALPHA				D3DTOP_BLENDTEXTUREALPHA
	#define D_D3DTOP_BLENDFACTORALPHA				D3DTOP_BLENDFACTORALPHA

	#define D_D3DTOP_BLENDTEXTUREALPHAPM			D3DTOP_BLENDTEXTUREALPHAPM
	#define D_D3DTOP_BLENDCURRENTALPHA				D3DTOP_BLENDCURRENTALPHA

	#define D_D3DTOP_PREMODULATE					D3DTOP_PREMODULATE
	#define D_D3DTOP_MODULATEALPHA_ADDCOLOR			D3DTOP_MODULATEALPHA_ADDCOLOR
	#define D_D3DTOP_MODULATECOLOR_ADDALPHA			D3DTOP_MODULATECOLOR_ADDALPHA
	#define D_D3DTOP_MODULATEINVALPHA_ADDCOLOR		D3DTOP_MODULATEINVALPHA_ADDCOLOR
	#define D_D3DTOP_MODULATEINVCOLOR_ADDALPHA		D3DTOP_MODULATEINVCOLOR_ADDALPHA

	#define D_D3DTOP_BUMPENVMAP						D3DTOP_BUMPENVMAP
	#define D_D3DTOP_BUMPENVMAPLUMINANCE			D3DTOP_BUMPENVMAPLUMINANCE
	#define D_D3DTOP_DOTPRODUCT3					D3DTOP_DOTPRODUCT3

	#define D_D3DSHADEMODE							D3DSHADEMODE
	#define D_D3DSHADE_FLAT							D3DSHADE_FLAT
	#define D_D3DSHADE_GOURAUD						D3DSHADE_GOURAUD
	#define D_D3DSHADE_PHONG						D3DSHADE_PHONG

	#define D_D3DTEXTUREMAGFILTER					D3DTEXTUREMAGFILTER
	#define D_D3DTFG_POINT							D3DTFG_POINT
	#define D_D3DTFG_LINEAR							D3DTFG_LINEAR
	#define D_D3DTFG_FLATCUBIC						D3DTFG_FLATCUBIC
	#define D_D3DTFG_GAUSSIANCUBIC					D3DTFG_GAUSSIANCUBIC
	#define D_D3DTFG_ANISOTROPIC					D3DTFG_ANISOTROPIC

	#define D_D3DTEXTUREMINFILTER					D3DTEXTUREMINFILTER
	#define D_D3DTFN_POINT							D3DTFN_POINT
	#define D_D3DTFN_LINEAR							D3DTFN_LINEAR
	#define D_D3DTFN_ANISOTROPIC					D3DTFN_ANISOTROPIC

	#define D_D3DTEXTUREADDRESS						D3DTEXTUREADDRESS
	#define D_D3DTADDRESS_WRAP						D3DTADDRESS_WRAP
	#define D_D3DTADDRESS_MIRROR					D3DTADDRESS_MIRROR
	#define D_D3DTADDRESS_CLAMP						D3DTADDRESS_CLAMP
	#define D_D3DTADDRESS_BORDER					D3DTADDRESS_BORDER

	#define D_D3DPRIMITIVETYPE						D3DPRIMITIVETYPE
	#define D_D3DPT_POINTLIST						D3DPT_POINTLIST
	#define D_D3DPT_LINELIST						D3DPT_LINELIST
	#define D_D3DPT_LINESTRIP						D3DPT_LINESTRIP
	#define D_D3DPT_TRIANGLELIST					D3DPT_TRIANGLELIST
	#define D_D3DPT_TRIANGLESTRIP					D3DPT_TRIANGLESTRIP
	#define D_D3DPT_TRIANGLEFAN						D3DPT_TRIANGLEFAN

	#define D_D3DCMPFUNC							D3DCMPFUNC
	#define D_D3DCMP_NEVER							D3DCMP_NEVER
	#define D_D3DCMP_LESS							D3DCMP_LESS
	#define D_D3DCMP_EQUAL							D3DCMP_EQUAL
	#define D_D3DCMP_LESSEQUAL						D3DCMP_LESSEQUAL
	#define D_D3DCMP_GREATER						D3DCMP_GREATER
	#define D_D3DCMP_NOTEQUAL						D3DCMP_NOTEQUAL
	#define D_D3DCMP_GREATEREQUAL					D3DCMP_GREATEREQUAL
	#define D_D3DCMP_ALWAYS							D3DCMP_ALWAYS
	#define D_D3DCMP_FORCE_DWORD					D3DCMP_FORCE_DWORD

	#define D_D3DRENDERSTATETYPE					D3DRENDERSTATETYPE
	#define D_D3DRENDERSTATE_ANTIALIAS				D3DRENDERSTATE_ANTIALIAS
	#define D_D3DRENDERSTATE_TEXTUREPERSPECTIVE		D3DRENDERSTATE_TEXTUREPERSPECTIVE
	#define D_D3DRENDERSTATE_ZENABLE				D3DRENDERSTATE_ZENABLE
	#define D_D3DRENDERSTATE_FILLMODE				D3DRENDERSTATE_FILLMODE
	#define D_D3DRENDERSTATE_SHADEMODE				D3DRENDERSTATE_SHADEMODE
	#define D_D3DRENDERSTATE_LINEPATTERN			D3DRENDERSTATE_LINEPATTERN
	#define D_D3DRENDERSTATE_ZWRITEENABLE			D3DRENDERSTATE_ZWRITEENABLE
	#define D_D3DRENDERSTATE_ALPHATESTENABLE		D3DRENDERSTATE_ALPHATESTENABLE
	#define D_D3DRENDERSTATE_LASTPIXEL				D3DRENDERSTATE_LASTPIXEL
	#define D_D3DRENDERSTATE_SRCBLEND				D3DRENDERSTATE_SRCBLEND
	#define D_D3DRENDERSTATE_DESTBLEND				D3DRENDERSTATE_DESTBLEND
	#define D_D3DRENDERSTATE_CULLMODE				D3DRENDERSTATE_CULLMODE
	#define D_D3DRENDERSTATE_ZFUNC					D3DRENDERSTATE_ZFUNC
	#define D_D3DRENDERSTATE_ALPHAREF				D3DRENDERSTATE_ALPHAREF
	#define D_D3DRENDERSTATE_ALPHAFUNC				D3DRENDERSTATE_ALPHAFUNC
	#define D_D3DRENDERSTATE_DITHERENABLE			D3DRENDERSTATE_DITHERENABLE
	#define D_D3DRENDERSTATE_ALPHABLENDENABLE		D3DRENDERSTATE_ALPHABLENDENABLE
	#define D_D3DRENDERSTATE_FOGENABLE				D3DRENDERSTATE_FOGENABLE
	#define D_D3DRENDERSTATE_SPECULARENABLE			D3DRENDERSTATE_SPECULARENABLE
	#define D_D3DRENDERSTATE_ZVISIBLE				D3DRENDERSTATE_ZVISIBLE
	#define D_D3DRENDERSTATE_STIPPLEDALPHA			D3DRENDERSTATE_STIPPLEDALPHA
	#define D_D3DRENDERSTATE_FOGCOLOR				D3DRENDERSTATE_FOGCOLOR
	#define D_D3DRENDERSTATE_FOGTABLEMODE			D3DRENDERSTATE_FOGTABLEMODE
	#define D_D3DRENDERSTATE_FOGSTART				D3DRENDERSTATE_FOGSTART
	#define D_D3DRENDERSTATE_FOGEND					D3DRENDERSTATE_FOGEND
	#define D_D3DRENDERSTATE_FOGDENSITY				D3DRENDERSTATE_FOGDENSITY
	#define D_D3DRENDERSTATE_EDGEANTIALIAS			D3DRENDERSTATE_EDGEANTIALIAS
	#define D_D3DRENDERSTATE_COLORKEYENABLE			D3DRENDERSTATE_COLORKEYENABLE
	#define D_D3DRENDERSTATE_ZBIAS					D3DRENDERSTATE_ZBIAS
	#define D_D3DRENDERSTATE_RANGEFOGENABLE			D3DRENDERSTATE_RANGEFOGENABLE
	#define D_D3DRENDERSTATE_STENCILENABLE			D3DRENDERSTATE_STENCILENABLE
	#define D_D3DRENDERSTATE_STENCILFAIL			D3DRENDERSTATE_STENCILFAIL
	#define D_D3DRENDERSTATE_STENCILZFAIL			D3DRENDERSTATE_STENCILZFAIL
	#define D_D3DRENDERSTATE_STENCILPASS			D3DRENDERSTATE_STENCILPASS
	#define D_D3DRENDERSTATE_STENCILFUNC			D3DRENDERSTATE_STENCILFUNC
	#define D_D3DRENDERSTATE_STENCILREF				D3DRENDERSTATE_STENCILREF
	#define D_D3DRENDERSTATE_STENCILMASK			D3DRENDERSTATE_STENCILMASK
	#define D_D3DRENDERSTATE_STENCILWRITEMASK		D3DRENDERSTATE_STENCILWRITEMASK
	#define D_D3DRENDERSTATE_TEXTUREFACTOR			D3DRENDERSTATE_TEXTUREFACTOR
	#define D_D3DRENDERSTATE_WRAP0					D3DRENDERSTATE_WRAP0
	#define D_D3DRENDERSTATE_WRAP1					D3DRENDERSTATE_WRAP1
	#define D_D3DRENDERSTATE_WRAP2					D3DRENDERSTATE_WRAP2
	#define D_D3DRENDERSTATE_WRAP3					D3DRENDERSTATE_WRAP3
	#define D_D3DRENDERSTATE_WRAP4					D3DRENDERSTATE_WRAP4
	#define D_D3DRENDERSTATE_WRAP5					D3DRENDERSTATE_WRAP5
	#define D_D3DRENDERSTATE_WRAP6					D3DRENDERSTATE_WRAP6
	#define D_D3DRENDERSTATE_WRAP7					D3DRENDERSTATE_WRAP7
	#define D_D3DRENDERSTATE_CLIPPING				D3DRENDERSTATE_CLIPPING
	#define D_D3DRENDERSTATE_LIGHTING				D3DRENDERSTATE_LIGHTING
	#define D_D3DRENDERSTATE_EXTENTS				D3DRENDERSTATE_EXTENTS
	#define D_D3DRENDERSTATE_AMBIENT				D3DRENDERSTATE_AMBIENT
	#define D_D3DRENDERSTATE_FOGVERTEXMODE			D3DRENDERSTATE_FOGVERTEXMODE
	#define D_D3DRENDERSTATE_COLORVERTEX			D3DRENDERSTATE_COLORVERTEX
	#define D_D3DRENDERSTATE_LOCALVIEWER			D3DRENDERSTATE_LOCALVIEWER
	#define D_D3DRENDERSTATE_NORMALIZENORMALS		D3DRENDERSTATE_NORMALIZENORMALS
	#define D_D3DRENDERSTATE_COLORKEYBLENDENABLE	D3DRENDERSTATE_COLORKEYBLENDENABLE
	#define D_D3DRENDERSTATE_DIFFUSEMATERIALSOURCE	D3DRENDERSTATE_DIFFUSEMATERIALSOURCE
	#define D_D3DRENDERSTATE_SPECULARMATERIALSOURCE	D3DRENDERSTATE_SPECULARMATERIALSOURCE
	#define D_D3DRENDERSTATE_AMBIENTMATERIALSOURCE	D3DRENDERSTATE_AMBIENTMATERIALSOURCE
	#define D_D3DRENDERSTATE_EMISSIVEMATERIALSOURCE	D3DRENDERSTATE_EMISSIVEMATERIALSOURCE
	#define D_D3DRENDERSTATE_VERTEXBLEND			D3DRENDERSTATE_VERTEXBLEND
	#define D_D3DRENDERSTATE_CLIPPLANEENABLE		D3DRENDERSTATE_CLIPPLANEENABLE

	#define D_D3DRENDERSTATE_TEXTUREHANDLE			D3DRENDERSTATE_TEXTUREHANDLE
	#define D_D3DRENDERSTATE_TEXTUREADDRESS			D3DRENDERSTATE_TEXTUREADDRESS
	#define D_D3DRENDERSTATE_WRAPU					D3DRENDERSTATE_WRAPU
	#define D_D3DRENDERSTATE_WRAPV					D3DRENDERSTATE_WRAPV
	#define D_D3DRENDERSTATE_MONOENABLE				D3DRENDERSTATE_MONOENABLE
	#define D_D3DRENDERSTATE_ROP2					D3DRENDERSTATE_ROP2
	#define D_D3DRENDERSTATE_PLANEMASK				D3DRENDERSTATE_PLANEMASK
	#define D_D3DRENDERSTATE_TEXTUREMAG				D3DRENDERSTATE_TEXTUREMAG
	#define D_D3DRENDERSTATE_TEXTUREMIN				D3DRENDERSTATE_TEXTUREMIN
	#define D_D3DRENDERSTATE_TEXTUREMAPBLEND		D3DRENDERSTATE_TEXTUREMAPBLEND
	#define D_D3DRENDERSTATE_SUBPIXEL				D3DRENDERSTATE_SUBPIXEL
	#define D_D3DRENDERSTATE_SUBPIXELX				D3DRENDERSTATE_SUBPIXELX
	#define D_D3DRENDERSTATE_STIPPLEENABLE			D3DRENDERSTATE_STIPPLEENABLE
	#define D_D3DRENDERSTATE_BORDERCOLOR			D3DRENDERSTATE_BORDERCOLOR
	#define D_D3DRENDERSTATE_TEXTUREADDRESSU		D3DRENDERSTATE_TEXTUREADDRESSU
	#define D_D3DRENDERSTATE_TEXTUREADDRESSV		D3DRENDERSTATE_TEXTUREADDRESSV
	#define D_D3DRENDERSTATE_MIPMAPLODBIAS			D3DRENDERSTATE_MIPMAPLODBIAS
	#define D_D3DRENDERSTATE_ANISOTROPY				D3DRENDERSTATE_ANISOTROPY
	#define D_D3DRENDERSTATE_FLUSHBATCH				D3DRENDERSTATE_FLUSHBATCH
	#define D_D3DRENDERSTATE_TRANSLUCENTSORTINDEPENDENT	D3DRENDERSTATE_TRANSLUCENTSORTINDEPENDENT
	#define D_D3DRENDERSTATE_STIPPLEPATTERN00		D3DRENDERSTATE_STIPPLEPATTERN00
	#define D_D3DRENDERSTATE_STIPPLEPATTERN01		D3DRENDERSTATE_STIPPLEPATTERN01
	#define D_D3DRENDERSTATE_STIPPLEPATTERN02		D3DRENDERSTATE_STIPPLEPATTERN02
	#define D_D3DRENDERSTATE_STIPPLEPATTERN03		D3DRENDERSTATE_STIPPLEPATTERN03
	#define D_D3DRENDERSTATE_STIPPLEPATTERN04		D3DRENDERSTATE_STIPPLEPATTERN04
	#define D_D3DRENDERSTATE_STIPPLEPATTERN05		D3DRENDERSTATE_STIPPLEPATTERN05
	#define D_D3DRENDERSTATE_STIPPLEPATTERN06		D3DRENDERSTATE_STIPPLEPATTERN06
	#define D_D3DRENDERSTATE_STIPPLEPATTERN07		D3DRENDERSTATE_STIPPLEPATTERN07
	#define D_D3DRENDERSTATE_STIPPLEPATTERN08		D3DRENDERSTATE_STIPPLEPATTERN08
	#define D_D3DRENDERSTATE_STIPPLEPATTERN09		D3DRENDERSTATE_STIPPLEPATTERN09
	#define D_D3DRENDERSTATE_STIPPLEPATTERN10		D3DRENDERSTATE_STIPPLEPATTERN10
	#define D_D3DRENDERSTATE_STIPPLEPATTERN11		D3DRENDERSTATE_STIPPLEPATTERN11
	#define D_D3DRENDERSTATE_STIPPLEPATTERN12		D3DRENDERSTATE_STIPPLEPATTERN12
	#define D_D3DRENDERSTATE_STIPPLEPATTERN13		D3DRENDERSTATE_STIPPLEPATTERN13
	#define D_D3DRENDERSTATE_STIPPLEPATTERN14		D3DRENDERSTATE_STIPPLEPATTERN14
	#define D_D3DRENDERSTATE_STIPPLEPATTERN15		D3DRENDERSTATE_STIPPLEPATTERN15
	#define D_D3DRENDERSTATE_STIPPLEPATTERN16		D3DRENDERSTATE_STIPPLEPATTERN16
	#define D_D3DRENDERSTATE_STIPPLEPATTERN17		D3DRENDERSTATE_STIPPLEPATTERN17
	#define D_D3DRENDERSTATE_STIPPLEPATTERN18		D3DRENDERSTATE_STIPPLEPATTERN18
	#define D_D3DRENDERSTATE_STIPPLEPATTERN19		D3DRENDERSTATE_STIPPLEPATTERN19
	#define D_D3DRENDERSTATE_STIPPLEPATTERN20		D3DRENDERSTATE_STIPPLEPATTERN20
	#define D_D3DRENDERSTATE_STIPPLEPATTERN21		D3DRENDERSTATE_STIPPLEPATTERN21
	#define D_D3DRENDERSTATE_STIPPLEPATTERN22		D3DRENDERSTATE_STIPPLEPATTERN22
	#define D_D3DRENDERSTATE_STIPPLEPATTERN23		D3DRENDERSTATE_STIPPLEPATTERN23
	#define D_D3DRENDERSTATE_STIPPLEPATTERN24		D3DRENDERSTATE_STIPPLEPATTERN24
	#define D_D3DRENDERSTATE_STIPPLEPATTERN25		D3DRENDERSTATE_STIPPLEPATTERN25
	#define D_D3DRENDERSTATE_STIPPLEPATTERN26		D3DRENDERSTATE_STIPPLEPATTERN26
	#define D_D3DRENDERSTATE_STIPPLEPATTERN27		D3DRENDERSTATE_STIPPLEPATTERN27
	#define D_D3DRENDERSTATE_STIPPLEPATTERN28		D3DRENDERSTATE_STIPPLEPATTERN28
	#define D_D3DRENDERSTATE_STIPPLEPATTERN29		D3DRENDERSTATE_STIPPLEPATTERN29
	#define D_D3DRENDERSTATE_STIPPLEPATTERN30		D3DRENDERSTATE_STIPPLEPATTERN30
	#define D_D3DRENDERSTATE_STIPPLEPATTERN31		D3DRENDERSTATE_STIPPLEPATTERN31

	#define D_D3DRENDERSTATE_FOGTABLESTART			D3DRENDERSTATE_FOGTABLESTART
	#define D_D3DRENDERSTATE_FOGTABLEEND			D3DRENDERSTATE_FOGTABLEEND
	#define D_D3DRENDERSTATE_FOGTABLEDENSITY		D3DRENDERSTATE_FOGTABLEDENSITY

	#define D_D3DTEXTURESTAGESTATETYPE				D3DTEXTURESTAGESTATETYPE
	#define D_D3DTSS_COLOROP						D3DTSS_COLOROP
	#define D_D3DTSS_COLORARG1						D3DTSS_COLORARG1
	#define D_D3DTSS_COLORARG2						D3DTSS_COLORARG2
	#define D_D3DTSS_ALPHAOP						D3DTSS_ALPHAOP
	#define D_D3DTSS_ALPHAARG1						D3DTSS_ALPHAARG1
	#define D_D3DTSS_ALPHAARG2						D3DTSS_ALPHAARG2
	#define D_D3DTSS_BUMPENVMAT00					D3DTSS_BUMPENVMAT00
	#define D_D3DTSS_BUMPENVMAT01					D3DTSS_BUMPENVMAT01
	#define D_D3DTSS_BUMPENVMAT10					D3DTSS_BUMPENVMAT10
	#define D_D3DTSS_BUMPENVMAT11					D3DTSS_BUMPENVMAT11
	#define D_D3DTSS_TEXCOORDINDEX					D3DTSS_TEXCOORDINDEX
	#define D_D3DTSS_ADDRESS						D3DTSS_ADDRESS
	#define D_D3DTSS_ADDRESSU						D3DTSS_ADDRESSU
	#define D_D3DTSS_ADDRESSV						D3DTSS_ADDRESSV
	#define D_D3DTSS_BORDERCOLOR					D3DTSS_BORDERCOLOR
	#define D_D3DTSS_MAGFILTER						D3DTSS_MAGFILTER
	#define D_D3DTSS_MINFILTER						D3DTSS_MINFILTER
	#define D_D3DTSS_MIPFILTER						D3DTSS_MIPFILTER
	#define D_D3DTSS_MIPMAPLODBIAS					D3DTSS_MIPMAPLODBIAS
	#define D_D3DTSS_MAXMIPLEVEL					D3DTSS_MAXMIPLEVEL
	#define D_D3DTSS_MAXANISOTROPY					D3DTSS_MAXANISOTROPY
	#define D_D3DTSS_BUMPENVLSCALE					D3DTSS_BUMPENVLSCALE
	#define D_D3DTSS_BUMPENVLOFFSET					D3DTSS_BUMPENVLOFFSET
	#define D_D3DTSS_TEXTURETRANSFORMFLAGS			D3DTSS_TEXTURETRANSFORMFLAGS

	#define D_D3DTRANSFORMSTATETYPE					D3DTRANSFORMSTATETYPE
	#define D_D3DTRANSFORMSTATE_WORLD				D3DTRANSFORMSTATE_WORLD
	#define D_D3DTRANSFORMSTATE_VIEW				D3DTRANSFORMSTATE_VIEW
	#define D_D3DTRANSFORMSTATE_PROJECTION			D3DTRANSFORMSTATE_PROJECTION
	#define D_D3DTRANSFORMSTATE_WORLD1				D3DTRANSFORMSTATE_WORLD1
	#define D_D3DTRANSFORMSTATE_WORLD2				D3DTRANSFORMSTATE_WORLD2
	#define D_D3DTRANSFORMSTATE_WORLD3				D3DTRANSFORMSTATE_WORLD3
	#define D_D3DTRANSFORMSTATE_TEXTURE0			D3DTRANSFORMSTATE_TEXTURE0
	#define D_D3DTRANSFORMSTATE_TEXTURE1			D3DTRANSFORMSTATE_TEXTURE1
	#define D_D3DTRANSFORMSTATE_TEXTURE2			D3DTRANSFORMSTATE_TEXTURE2
	#define D_D3DTRANSFORMSTATE_TEXTURE3			D3DTRANSFORMSTATE_TEXTURE3
	#define D_D3DTRANSFORMSTATE_TEXTURE4			D3DTRANSFORMSTATE_TEXTURE4
	#define D_D3DTRANSFORMSTATE_TEXTURE5			D3DTRANSFORMSTATE_TEXTURE5
	#define D_D3DTRANSFORMSTATE_TEXTURE6			D3DTRANSFORMSTATE_TEXTURE6
	#define D_D3DTRANSFORMSTATE_TEXTURE7			D3DTRANSFORMSTATE_TEXTURE7

	#define D_D3DLIGHTTYPE							D3DLIGHTTYPE
	#define D_D3DLIGHT_POINT						D3DLIGHT_POINT
	#define D_D3DLIGHT_SPOT							D3DLIGHT_SPOT
	#define D_D3DLIGHT_DIRECTIONAL					D3DLIGHT_DIRECTIONAL
	#define D_D3DLIGHT_PARALLELPOINT				D3DLIGHT_PARALLELPOINT
	#define D_D3DLIGHT_GLSPOT						D3DLIGHT_GLSPOT

	#define D_D3DVALUE								D3DVALUE
	#define D_D3DCOLOR								D3DCOLOR

	#define D_D3DVIEWPORT7							D3DVIEWPORT7
	#define D_D3DPRIMCAPS							D3DPRIMCAPS
	#define D_D3DDEVICEDESC7						D3DDEVICEDESC7
	#define D_D3DRECT								D3DRECT
	#define D_D3DMATRIX								D3DMATRIX
	#define D_D3DCOLORVALUE							D3DCOLORVALUE
	#define D_D3DVECTOR								D3DVECTOR
	#define D_D3DMATERIAL7							D3DMATERIAL7
	#define D_D3DLIGHT7								D3DLIGHT7
	#define D_D3DVERTEXBUFFERDESC					D3DVERTEXBUFFERDESC

	#define LPD_D3DENUMDEVICESCALLBACK7				LPD3DENUMDEVICESCALLBACK7
	#define LPD_D3DENUMPIXELFORMATSCALLBACK			LPD3DENUMPIXELFORMATSCALLBACK
	#define LPD_D3DENUMPIXELFORMATSCALLBACK			LPD3DENUMPIXELFORMATSCALLBACK
	
	#define D_IDirect3D7							IDirect3D7
	#define D_IDirect3DDevice7						IDirect3DDevice7
	#define D_IDirect3DVertexBuffer7				IDirect3DVertexBuffer7

	// ÇcÇâÇíÇÖÇÉÇîÇhÇéÇêÇïÇî -----------------------------------------------------

	#define D_DI_OK									DI_OK
	#define D_DIDEVTYPE_KEYBOARD					DIDEVTYPE_KEYBOARD
	#define D_DIDEVTYPE_JOYSTICK					DIDEVTYPE_JOYSTICK
	#define D_DIEDFL_ATTACHEDONLY					DIEDFL_ATTACHEDONLY

	#define D_DIENUM_STOP							DIENUM_STOP
	#define D_DIENUM_CONTINUE						DIENUM_CONTINUE

	#define D_DIPROP_BUFFERSIZE						DIPROP_BUFFERSIZE
	#define D_DIPROP_RANGE							DIPROP_RANGE
	#define D_DIPROP_DEADZONE						DIPROP_DEADZONE

	#define D_DI_POLLEDDEVICE						DI_POLLEDDEVICE

	#define D_DISCL_EXCLUSIVE						DISCL_EXCLUSIVE
	#define D_DISCL_NONEXCLUSIVE					DISCL_NONEXCLUSIVE
	#define D_DISCL_FOREGROUND						DISCL_FOREGROUND
	#define D_DISCL_BACKGROUND						DISCL_BACKGROUND

	#define D_DIJOFS_X								DIJOFS_X
	#define D_DIJOFS_Y								DIJOFS_Y
	#define D_DIJOFS_Z								DIJOFS_Z
	#define D_DIJOFS_RX								DIJOFS_RX
	#define D_DIJOFS_RY								DIJOFS_RY
	#define D_DIJOFS_RZ								DIJOFS_RZ

	#define D_DIPH_DEVICE							DIPH_DEVICE
	#define D_DIPH_BYOFFSET							DIPH_BYOFFSET
	#define D_DIDFT_ENUMCOLLECTION(n)				DIDFT_ENUMCOLLECTION(n)

	#define D_DIK_ESCAPE							DIK_ESCAPE
	#define D_DIK_1									DIK_1
	#define D_DIK_2									DIK_2
	#define D_DIK_3									DIK_3
	#define D_DIK_4									DIK_4
	#define D_DIK_5									DIK_5
	#define D_DIK_6									DIK_6
	#define D_DIK_7									DIK_7
	#define D_DIK_8									DIK_8
	#define D_DIK_9									DIK_9
	#define D_DIK_0									DIK_0
	#define D_DIK_MINUS								DIK_MINUS
	#define D_DIK_EQUALS							DIK_EQUALS
	#define D_DIK_BACK								DIK_BACK
	#define D_DIK_TAB								DIK_TAB
	#define D_DIK_Q									DIK_Q
	#define D_DIK_W									DIK_W
	#define D_DIK_E									DIK_E
	#define D_DIK_R									DIK_R
	#define D_DIK_T									DIK_T
	#define D_DIK_Y									DIK_Y
	#define D_DIK_U									DIK_U
	#define D_DIK_I									DIK_I
	#define D_DIK_O									DIK_O
	#define D_DIK_P									DIK_P
	#define D_DIK_LBRACKET							DIK_LBRACKET
	#define D_DIK_RBRACKET							DIK_RBRACKET
	#define D_DIK_RETURN							DIK_RETURN
	#define D_DIK_LCONTROL							DIK_LCONTROL
	#define D_DIK_A									DIK_A
	#define D_DIK_S									DIK_S
	#define D_DIK_D									DIK_D
	#define D_DIK_F									DIK_F
	#define D_DIK_G									DIK_G
	#define D_DIK_H									DIK_H
	#define D_DIK_J									DIK_J
	#define D_DIK_K									DIK_K
	#define D_DIK_L									DIK_L
	#define D_DIK_SEMICOLON							DIK_SEMICOLON
	#define D_DIK_APOSTROPHE						DIK_APOSTROPHE
	#define D_DIK_GRAVE								DIK_GRAVE
	#define D_DIK_LSHIFT							DIK_LSHIFT
	#define D_DIK_BACKSLASH							DIK_BACKSLASH
	#define D_DIK_Z									DIK_Z
	#define D_DIK_X									DIK_X
	#define D_DIK_C									DIK_C
	#define D_DIK_V									DIK_V
	#define D_DIK_B									DIK_B
	#define D_DIK_N									DIK_N
	#define D_DIK_M									DIK_M
	#define D_DIK_COMMA								DIK_COMMA
	#define D_DIK_PERIOD							DIK_PERIOD
	#define D_DIK_SLASH								DIK_SLASH
	#define D_DIK_RSHIFT							DIK_RSHIFT
	#define D_DIK_MULTIPLY							DIK_MULTIPLY
	#define D_DIK_LMENU								DIK_LMENU
	#define D_DIK_SPACE								DIK_SPACE
	#define D_DIK_CAPITAL							DIK_CAPITAL
	#define D_DIK_F1								DIK_F1
	#define D_DIK_F2								DIK_F2
	#define D_DIK_F3								DIK_F3
	#define D_DIK_F4								DIK_F4
	#define D_DIK_F5								DIK_F5
	#define D_DIK_F6								DIK_F6
	#define D_DIK_F7								DIK_F7
	#define D_DIK_F8								DIK_F8
	#define D_DIK_F9								DIK_F9
	#define D_DIK_F10								DIK_F10
	#define D_DIK_NUMLOCK							DIK_NUMLOCK
	#define D_DIK_SCROLL							DIK_SCROLL
	#define D_DIK_NUMPAD7							DIK_NUMPAD7
	#define D_DIK_NUMPAD8							DIK_NUMPAD8
	#define D_DIK_NUMPAD9							DIK_NUMPAD9
	#define D_DIK_SUBTRACT							DIK_SUBTRACT
	#define D_DIK_NUMPAD4							DIK_NUMPAD4
	#define D_DIK_NUMPAD5							DIK_NUMPAD5
	#define D_DIK_NUMPAD6							DIK_NUMPAD6
	#define D_DIK_ADD								DIK_ADD
	#define D_DIK_NUMPAD1							DIK_NUMPAD1
	#define D_DIK_NUMPAD2							DIK_NUMPAD2
	#define D_DIK_NUMPAD3							DIK_NUMPAD3
	#define D_DIK_NUMPAD0							DIK_NUMPAD0
	#define D_DIK_DECIMAL							DIK_DECIMAL
	#define D_DIK_OEM_102							DIK_OEM_102
	#define D_DIK_F11								DIK_F11
	#define D_DIK_F12								DIK_F12
	#define D_DIK_F13								DIK_F13
	#define D_DIK_F14								DIK_F14
	#define D_DIK_F15								DIK_F15
	#define D_DIK_KANA								DIK_KANA
	#define D_DIK_ABNT_C1							DIK_ABNT_C1
	#define D_DIK_CONVERT							DIK_CONVERT
	#define D_DIK_NOCONVERT							DIK_NOCONVERT
	#define D_DIK_YEN								DIK_YEN
	#define D_DIK_ABNT_C2							DIK_ABNT_C2
	#define D_DIK_NUMPADEQUALS						DIK_NUMPADEQUALS
	#define D_DIK_PREVTRACK							DIK_PREVTRACK
	#define D_DIK_AT								DIK_AT
	#define D_DIK_COLON								DIK_COLON
	#define D_DIK_UNDERLINE							DIK_UNDERLINE
	#define D_DIK_KANJI								DIK_KANJI
	#define D_DIK_STOP								DIK_STOP
	#define D_DIK_AX								DIK_AX
	#define D_DIK_UNLABELED							DIK_UNLABELED
	#define D_DIK_NEXTTRACK							DIK_NEXTTRACK
	#define D_DIK_NUMPADENTER						DIK_NUMPADENTER
	#define D_DIK_RCONTROL							DIK_RCONTROL
	#define D_DIK_MUTE								DIK_MUTE
	#define D_DIK_CALCULATOR						DIK_CALCULATOR
	#define D_DIK_PLAYPAUSE							DIK_PLAYPAUSE
	#define D_DIK_MEDIASTOP							DIK_MEDIASTOP
	#define D_DIK_VOLUMEDOWN						DIK_VOLUMEDOWN
	#define D_DIK_VOLUMEUP							DIK_VOLUMEUP
	#define D_DIK_WEBHOME							DIK_WEBHOME
	#define D_DIK_NUMPADCOMMA						DIK_NUMPADCOMMA
	#define D_DIK_DIVIDE							DIK_DIVIDE
	#define D_DIK_SYSRQ								DIK_SYSRQ
	#define D_DIK_RMENU								DIK_RMENU
	#define D_DIK_PAUSE								DIK_PAUSE
	#define D_DIK_HOME								DIK_HOME
	#define D_DIK_UP								DIK_UP
	#define D_DIK_PRIOR								DIK_PRIOR
	#define D_DIK_LEFT								DIK_LEFT
	#define D_DIK_RIGHT								DIK_RIGHT
	#define D_DIK_END								DIK_END
	#define D_DIK_DOWN								DIK_DOWN
	#define D_DIK_NEXT								DIK_NEXT
	#define D_DIK_INSERT							DIK_INSERT
	#define D_DIK_DELETE							DIK_DELETE
	#define D_DIK_LWIN								DIK_LWIN
	#define D_DIK_RWIN								DIK_RWIN
	#define D_DIK_APPS								DIK_APPS
	#define D_DIK_POWER								DIK_POWER
	#define D_DIK_SLEEP								DIK_SLEEP
	#define D_DIK_WAKE								DIK_WAKE
	#define D_DIK_WEBSEARCH							DIK_WEBSEARCH
	#define D_DIK_WEBFAVORITES						DIK_WEBFAVORITES
	#define D_DIK_WEBREFRESH						DIK_WEBREFRESH
	#define D_DIK_WEBSTOP							DIK_WEBSTOP
	#define D_DIK_WEBFORWARD						DIK_WEBFORWARD
	#define D_DIK_WEBBACK							DIK_WEBBACK
	#define D_DIK_MYCOMPUTER						DIK_MYCOMPUTER
	#define D_DIK_MAIL								DIK_MAIL
	#define D_DIK_MEDIASELECT						DIK_MEDIASELECT

	#define D_DIK_BACKSPACE							D_DIK_BACK
	#define D_DIK_NUMPADSTAR						D_DIK_MULTIPLY
	#define D_DIK_LALT								D_DIK_LMENU
	#define D_DIK_CAPSLOCK							D_DIK_CAPITAL
	#define D_DIK_NUMPADMINUS						D_DIK_SUBTRACT
	#define D_DIK_NUMPADPLUS						D_DIK_ADD
	#define D_DIK_NUMPADPERIOD						D_DIK_DECIMAL
	#define D_DIK_NUMPADSLASH						D_DIK_DIVIDE
	#define D_DIK_RALT								D_DIK_RMENU
	#define D_DIK_UPARROW							D_DIK_UP
	#define D_DIK_PGUP								D_DIK_PRIOR
	#define D_DIK_LEFTARROW							D_DIK_LEFT
	#define D_DIK_RIGHTARROW						D_DIK_RIGHT
	#define D_DIK_DOWNARROW							D_DIK_DOWN
	#define D_DIK_PGDN								D_DIK_NEXT

	#define D_DI_DEGREES							DI_DEGREES
	#define D_DI_FFNOMINALMAX						DI_FFNOMINALMAX
	#define D_DI_SECONDS							DI_SECONDS

	#define D_DIEFF_OBJECTIDS						DIEFF_OBJECTIDS
	#define D_DIEFF_OBJECTOFFSETS					DIEFF_OBJECTOFFSETS
	#define D_DIEFF_CARTESIAN						DIEFF_CARTESIAN
	#define D_DIEFF_POLAR							DIEFF_POLAR
	#define D_DIEFF_SPHERICAL						DIEFF_SPHERICAL

	#define D_DIJOFS_BUTTON(n)						DIJOFS_BUTTON(n)

	#define D_DIEP_DURATION							DIEP_DURATION
	#define D_DIEP_SAMPLEPERIOD						DIEP_SAMPLEPERIOD
	#define D_DIEP_GAIN								DIEP_GAIN
	#define D_DIEP_TRIGGERBUTTON					DIEP_TRIGGERBUTTON
	#define D_DIEP_TRIGGERREPEATINTERVAL			DIEP_TRIGGERREPEATINTERVAL
	#define D_DIEP_AXES								DIEP_AXES
	#define D_DIEP_DIRECTION						DIEP_DIRECTION
	#define D_DIEP_ENVELOPE							DIEP_ENVELOPE
	#define D_DIEP_TYPESPECIFICPARAMS				DIEP_TYPESPECIFICPARAMS
	#define D_DIEP_START							DIEP_START
	#define D_DIEP_NORESTART						DIEP_NORESTART
	#define D_DIEP_NODOWNLOAD						DIEP_NODOWNLOAD
	#define D_DIEB_NOTRIGGER						DIEB_NOTRIGGER

	#define D_DIEFT_ALL								DIEFT_ALL
	#define D_DIEFT_CONSTANTFORCE					DIEFT_CONSTANTFORCE
	#define D_DIEFT_RAMPFORCE						DIEFT_RAMPFORCE
	#define D_DIEFT_PERIODIC						DIEFT_PERIODIC
	#define D_DIEFT_CONDITION						DIEFT_CONDITION
	#define D_DIEFT_CUSTOMFORCE						DIEFT_CUSTOMFORCE
	#define D_DIEFT_HARDWARE						DIEFT_HARDWARE
	#define D_DIEFT_FFATTACK						DIEFT_FFATTACK
	#define D_DIEFT_FFFADE							DIEFT_FFFADE
	#define D_DIEFT_SATURATION						DIEFT_SATURATION
	#define D_DIEFT_POSNEGCOEFFICIENTS				DIEFT_POSNEGCOEFFICIENTS
	#define D_DIEFT_POSNEGSATURATION				DIEFT_POSNEGSATURATION
	#define D_DIEFT_DEADBAND						DIEFT_DEADBAND
	#define D_DIEFT_STARTDELAY						DIEFT_STARTDELAY

	#define D_DIDEVICEINSTANCE						DIDEVICEINSTANCE
	#define D_DIPROPHEADER							DIPROPHEADER
	#define D_DIPROPRANGE							DIPROPRANGE
	#define D_DIPROPDWORD							DIPROPDWORD
	#define D_DIDEVICEOBJECTDATA_DX7				DIDEVICEOBJECTDATA
	#define D_DIDEVICEOBJECTDATA_DX8				DIDEVICEOBJECTDATA
	#define D_DIJOYSTATE							DIJOYSTATE
	#define D_DIMOUSESTATE							DIMOUSESTATE
	#define D_DIMOUSESTATE2							DIMOUSESTATE2
	#define D_DIOBJECTDATAFORMAT					DIOBJECTDATAFORMAT
	#define D_DIDATAFORMAT							DIDATAFORMAT
	#define D_DIDEVCAPS								DIDEVCAPS
	#define D_DIENVELOPE							DIENVELOPE
	#define D_DIPERIODIC							DIPERIODIC
	#define D_DIEFFECT								DIEFFECT
	#define D_DIEFFECTINFO							DIEFFECTINFO
	#define D_DICONSTANTFORCE						DICONSTANTFORCE

	#define LPD_DIENUMDEVICESCALLBACK				LPDIENUMDEVICESCALLBACK
	
	#define D_IDirectInputDevice					IDirectInputDevice
	#define D_IDirectInputDevice2					IDirectInputDevice2
	#define D_IDirectInputDevice7					IDirectInputDevice7
	#define D_IDirectInput							IDirectInput
	#define D_IDirectInput2							IDirectInput2
	#define D_IDirectInput7							IDirectInput7
	#define D_IDirectInputEffect					IDirectInputEffect

#else	/* #ifdef DX_USE_DIRECTX_SDK_FILE */
	#define DX_NOUSE_DIRECTX_SDK_FILE

	#include <windows.h>
	#include <mmreg.h>
	#include <unknwn.h>
	
	typedef void *D_HMONITOR ;

	// ÇcÇâÇíÇÖÇÉÇîÇrÇèÇïÇéÇÑ -----------------------------------------------------

	#define D_DS_OK									(S_OK)

	#define D_DSBVOLUME_MIN							(-10000)
	#define D_DSBVOLUME_MAX							(0)

	#define D_DSSCL_NORMAL							(0x00000001)
	#define D_DSSCL_PRIORITY						(0x00000002)
	#define D_DSSCL_EXCLUSIVE						(0x00000003)
	#define D_DSSCL_WRITEPRIMARY					(0x00000004)

	#define D_DSBPLAY_LOOPING						(0x00000001)
	#define D_DSBSTATUS_PLAYING						(0x00000001)
	#define D_DSBFREQUENCY_ORIGINAL					(0)

	#define D_DSBCAPS_PRIMARYBUFFER					(0x00000001)
	#define D_DSBCAPS_STATIC						(0x00000002)
	#define D_DSBCAPS_CTRLFREQUENCY					(0x00000020)
	#define D_DSBCAPS_CTRLPAN						(0x00000040)
	#define D_DSBCAPS_CTRLVOLUME					(0x00000080)
	#define D_DSBCAPS_GLOBALFOCUS					(0x00008000)
	#define D_DSBCAPS_GETCURRENTPOSITION2			(0x00010000)

	#define D_DSCAPS_PRIMARYMONO					(0x00000001)
	#define D_DSCAPS_PRIMARYSTEREO					(0x00000002)
	#define D_DSCAPS_PRIMARY8BIT					(0x00000004)
	#define D_DSCAPS_PRIMARY16BIT					(0x00000008)
	#define D_DSCAPS_SECONDARYMONO					(0x00000100)
	#define D_DSCAPS_SECONDARYSTEREO				(0x00000200)
	#define D_DSCAPS_SECONDARY8BIT					(0x00000400)
	#define D_DSCAPS_SECONDARY16BIT					(0x00000800)

	typedef struct tagD_DSCAPS
	{
		DWORD										dwSize;
		DWORD										dwFlags;
		DWORD										dwMinSecondarySampleRate;
		DWORD										dwMaxSecondarySampleRate;
		DWORD										dwPrimaryBuffers;
		DWORD										dwMaxHwMixingAllBuffers;
		DWORD										dwMaxHwMixingStaticBuffers;
		DWORD										dwMaxHwMixingStreamingBuffers;
		DWORD										dwFreeHwMixingAllBuffers;
		DWORD										dwFreeHwMixingStaticBuffers;
		DWORD										dwFreeHwMixingStreamingBuffers;
		DWORD										dwMaxHw3DAllBuffers;
		DWORD										dwMaxHw3DStaticBuffers;
		DWORD										dwMaxHw3DStreamingBuffers;
		DWORD										dwFreeHw3DAllBuffers;
		DWORD										dwFreeHw3DStaticBuffers;
		DWORD										dwFreeHw3DStreamingBuffers;
		DWORD										dwTotalHwMemBytes;
		DWORD										dwFreeHwMemBytes;
		DWORD										dwMaxContigFreeHwMemBytes;
		DWORD										dwUnlockTransferRateHwBuffers;
		DWORD										dwPlayCpuOverheadSwBuffers;
		DWORD										dwReserved1;
		DWORD										dwReserved2;
	} D_DSCAPS ;

	typedef struct tagD_DSBUFFERDESC
	{
		DWORD										dwSize;
		DWORD										dwFlags;
		DWORD										dwBufferBytes;
		DWORD										dwReserved;
		LPWAVEFORMATEX								lpwfxFormat;

		GUID										guid3DAlgorithm;
	} D_DSBUFFERDESC ;

	typedef struct tagD_DSBPOSITIONNOTIFY
	{
		DWORD										dwOffset;
		HANDLE										hEventNotify;
	} D_DSBPOSITIONNOTIFY ;

	typedef BOOL ( CALLBACK *LPD_DSENUMCALLBACKA )	( LPGUID, LPCSTR, LPCSTR, LPVOID ) ;
	typedef BOOL ( CALLBACK *LPD_DSENUMCALLBACKW )	( LPGUID, LPCWSTR, LPCWSTR, LPVOID ) ;

	class D_IDirectSound : public IUnknown
	{
	public :
		virtual HRESULT __stdcall CreateSoundBuffer			( const D_DSBUFFERDESC *pcDSBufferDesc, class D_IDirectSoundBuffer **ppDSBuffer, IUnknown *pUnkOuter ) = 0 ;
		virtual HRESULT __stdcall GetCaps					( D_DSCAPS *pDSCaps ) = 0 ;
//		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// DuplicateSoundBuffer( LPDIRECTSOUNDBUFFER pDSBufferOriginal, LPDIRECTSOUNDBUFFER *ppDSBufferDuplicate ) = 0 ;
		virtual HRESULT __stdcall DuplicateSoundBuffer		( class D_IDirectSoundBuffer *pDSBufferOriginal, class D_IDirectSoundBuffer **ppDSBufferDuplicate ) = 0 ;
		virtual HRESULT __stdcall SetCooperativeLevel		( HWND hwnd, DWORD dwLevel ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// Compact( void ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// GetSpeakerConfig( LPDWORD pdwSpeakerConfig ) = 0 ;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// SetSpeakerConfig( DWORD dwSpeakerConfig ) = 0 ;
		virtual HRESULT __stdcall Initialize				( const GUID *pcGuidDevice ) = 0 ;
	} ;

	class D_IDirectSound8 : public D_IDirectSound
	{
	public :
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// VerifyCertification( LPDWORD pdwCertified ) = 0 ;
	} ;

	class D_IDirectSoundBuffer : public IUnknown
	{
	public :
		virtual HRESULT __stdcall GetCaps					( void ) = 0 ;				// GetCaps( LPDSBCAPS pDSBufferCaps ) = 0 ;
		virtual HRESULT __stdcall GetCurrentPosition		( DWORD *pdwCurrentPlayCursor, DWORD *pdwCurrentWriteCursor ) = 0 ;
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// GetFormat( LPWAVEFORMATEX pwfxFormat, DWORD dwSizeAllocated, LPDWORD pdwSizeWritten ) = 0 ;
		virtual HRESULT __stdcall GetVolume					( LPLONG plVolume ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// GetPan( LPLONG plPan ) = 0 ;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// GetFrequency( LPDWORD pdwFrequency ) = 0 ;
		virtual HRESULT __stdcall GetStatus					( DWORD *pdwStatus ) = 0 ;
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// Initialize( LPDIRECTSOUND pDirectSound, LPCDSBUFFERDESC pcDSBufferDesc ) = 0 ;
		virtual HRESULT __stdcall Lock						( DWORD dwOffset, DWORD dwBytes, void **ppvAudioPtr1, DWORD *pdwAudioBytes1, void **ppvAudioPtr2, DWORD *pdwAudioBytes2, DWORD dwFlags ) = 0 ;
		virtual HRESULT __stdcall Play						( DWORD dwReserved1, DWORD dwPriority, DWORD dwFlags ) = 0 ;
		virtual HRESULT __stdcall SetCurrentPosition		( DWORD dwNewPosition ) = 0 ;
		virtual HRESULT __stdcall SetFormat					( const WAVEFORMATEX *pcfxFormat ) = 0 ;
		virtual HRESULT __stdcall SetVolume					( LONG lVolume ) = 0 ;
		virtual HRESULT __stdcall SetPan					( LONG lPan ) = 0 ;
		virtual HRESULT __stdcall SetFrequency				( DWORD dwFrequency ) = 0 ;
		virtual HRESULT __stdcall Stop						( void ) = 0 ;
		virtual HRESULT __stdcall Unlock					( void *pvAudioPtr1, DWORD dwAudioBytes1, void *pvAudioPtr2, DWORD dwAudioBytes2 ) = 0 ;
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// Restore( void ) = 0 ;
	} ;

	class D_IDirectSoundBuffer8 : public D_IDirectSoundBuffer
	{
	public :
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// SetFX( DWORD dwEffectsCount, LPDSEFFECTDESC pDSFXDesc, LPDWORD pdwResultCodes ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// AcquireResources( DWORD dwFlags, DWORD dwEffectsCount, LPDWORD pdwResultCodes ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// GetObjectInPath( REFGUID rguidObject, DWORD dwIndex, REFGUID rguidInterface, LPVOID *ppObject ) = 0 ;
	} ;

	class D_IDirectSoundNotify : public IUnknown
	{
	public :
		virtual HRESULT __stdcall SetNotificationPositions	( DWORD dwPositionNotifies, const D_DSBPOSITIONNOTIFY *pcPositionNotifies ) = 0 ;
	} ;

	// ÇcÇâÇíÇÖÇÉÇîÇlÇïÇìÇâÇÉ -----------------------------------------------------

	#define D_DMUS_APATH_SHARED_STEREOPLUSREVERB	(1)
	#define D_DMUS_AUDIOF_ALL						(0x3F)
	#define D_DMUS_PC_OUTPUTCLASS					(1)
	#define D_DMUS_SEG_REPEAT_INFINITE				(0xFFFFFFFF)

	#define D_DMUS_MAX_DESCRIPTION					(128)
	#define D_DMUS_MAX_CATEGORY						(64)
	#define D_DMUS_MAX_NAME							(64)
	#define D_DMUS_MAX_FILENAME						MAX_PATH

	#define D_DMUS_AUDIOPARAMS_FEATURES				(0x00000001)
	#define D_DMUS_AUDIOPARAMS_SAMPLERATE			(0x00000004)
	#define D_DMUS_AUDIOPARAMS_DEFAULTSYNTH			(0x00000008)

	#define D_DMUS_OBJ_CLASS						(1 << 1)
	#define D_DMUS_OBJ_MEMORY						(1 << 10)

	typedef enum tagD_DMUS_SEGF_FLAGS
	{
		D_DMUS_SEGF_REFTIME							= 1 << 6,
	} D_DMUS_SEGF_FLAGS ;


	typedef long									D_MUSIC_TIME ;
	typedef LONGLONG								D_REFERENCE_TIME ;

	typedef struct tagD_DMUS_PORTCAPS
	{
		DWORD										dwSize;
		DWORD										dwFlags;
		GUID										guidPort;
		DWORD										dwClass;
		DWORD										dwType;
		DWORD										dwMemorySize;
		DWORD										dwMaxChannelGroups;
		DWORD										dwMaxVoices;	
		DWORD										dwMaxAudioChannels;
		DWORD										dwEffectFlags;
		WCHAR										wszDescription[D_DMUS_MAX_DESCRIPTION];
	} D_DMUS_PORTCAPS ;

	typedef struct tagD_DMUS_VERSION
	{
		DWORD										dwVersionMS;
		DWORD										dwVersionLS;
	} D_DMUS_VERSION ;

	typedef struct tagD_DMUS_OBJECTDESC
	{
		DWORD										dwSize;
		DWORD										dwValidData;
		GUID										guidObject;
		GUID										guidClass;
		FILETIME									ftDate;
		D_DMUS_VERSION								vVersion;
		WCHAR										wszName[D_DMUS_MAX_NAME];
		WCHAR										wszCategory[D_DMUS_MAX_CATEGORY];
		WCHAR										wszFileName[D_DMUS_MAX_FILENAME];
		LONGLONG									llMemLength;
		LPBYTE										pbMemData;
		IStream 									*pStream;
	} D_DMUS_OBJECTDESC ;

	typedef struct tagD_DMUS_AUDIOPARAMS
	{
		DWORD										dwSize;
		BOOL										fInitNow;
		DWORD 										dwValidData;
		DWORD										dwFeatures;
		DWORD										dwVoices;
		DWORD										dwSampleRate;
		CLSID										clsidDefaultSynth;
	} D_DMUS_AUDIOPARAMS ;

	class D_IDirectMusic : public IUnknown
	{
	public :
		virtual HRESULT __stdcall EnumPort					( DWORD dwIndex, D_DMUS_PORTCAPS *pPortCaps ) = 0 ;
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// CreateMusicBuffer( LPDMUS_BUFFERDESC pBufferDesc, LPDIRECTMUSICBUFFER *ppBuffer, LPUNKNOWN pUnkOuter ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// CreatePort( REFCLSID rclsidPort, LPDMUS_PORTPARAMS pPortParams, LPDIRECTMUSICPORT *ppPort, LPUNKNOWN pUnkOuter ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// EnumMasterClock( DWORD dwIndex, LPDMUS_CLOCKINFO lpClockInfo ) = 0 ;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// GetMasterClock( LPGUID pguidClock, IReferenceClock **ppReferenceClock ) = 0 ;
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// SetMasterClock( REFGUID rguidClock ) = 0 ;
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// Activate( BOOL fEnable ) = 0 ;
		virtual HRESULT __stdcall NonUse06					( void ) = 0 ;				// GetDefaultPort( LPGUID pguidPort ) = 0 ;
		virtual HRESULT __stdcall NonUse07					( void ) = 0 ;				// SetDirectSound( LPDIRECTSOUND pDirectSound, HWND hWnd ) = 0 ;
	} ;

	class D_IDirectMusic8 : public D_IDirectMusic
	{
	public :
		virtual HRESULT __stdcall NonUse08					( void ) = 0 ;				// SetExternalMasterClock( IReferenceClock *pClock ) = 0 ;
	} ;

	class D_IDirectMusicSegmentState : public IUnknown
	{
	public :
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// GetRepeats( DWORD* pdwRepeats ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// GetSegment( class IDirectMusicSegment** ppSegment ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// GetStartTime( MUSIC_TIME* pmtStart ) = 0 ;
		virtual HRESULT __stdcall GetSeek					( D_MUSIC_TIME *pmtSeek ) = 0 ;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// GetStartPoint( MUSIC_TIME* pmtStart ) = 0 ;
	} ;

	class D_IDirectMusicSegment : public IUnknown
	{
	public :
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// GetLength( MUSIC_TIME* pmtLength ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// SetLength( MUSIC_TIME mtLength ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// GetRepeats( DWORD* pdwRepeats ) = 0 ;
		virtual HRESULT __stdcall SetRepeats				( DWORD	dwRepeats ) = 0 ;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// GetDefaultResolution( DWORD* pdwResolution ) = 0 ;
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// SetDefaultResolution( DWORD	dwResolution ) = 0 ;
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// GetTrack( REFGUID rguidType, DWORD dwGroupBits, DWORD dwIndex, IDirectMusicTrack** ppTrack ) = 0 ;
		virtual HRESULT __stdcall NonUse06					( void ) = 0 ;				// GetTrackGroup( IDirectMusicTrack* pTrack, DWORD* pdwGroupBits ) = 0 ;
		virtual HRESULT __stdcall NonUse07					( void ) = 0 ;				// InsertTrack( IDirectMusicTrack* pTrack, DWORD dwGroupBits ) = 0 ;
		virtual HRESULT __stdcall NonUse08					( void ) = 0 ;				// RemoveTrack( IDirectMusicTrack* pTrack ) = 0 ;
		virtual HRESULT __stdcall NonUse09					( void ) = 0 ;				// InitPlay( IDirectMusicSegmentState** ppSegState, class IDirectMusicPerformance* pPerformance, DWORD dwFlags ) = 0 ;
		virtual HRESULT __stdcall NonUse10					( void ) = 0 ;				// GetGraph( IDirectMusicGraph** ppGraph ) = 0 ;
		virtual HRESULT __stdcall NonUse11					( void ) = 0 ;				// SetGraph( IDirectMusicGraph* pGraph ) = 0 ;
		virtual HRESULT __stdcall NonUse12					( void ) = 0 ;				// AddNotificationType( REFGUID rguidNotificationType ) = 0 ;
		virtual HRESULT __stdcall NonUse13					( void ) = 0 ;				// RemoveNotificationType( REFGUID rguidNotificationType ) = 0 ;
		virtual HRESULT __stdcall NonUse14					( void ) = 0 ;				// GetParam( REFGUID rguidType, DWORD dwGroupBits, DWORD dwIndex, MUSIC_TIME mtTime, MUSIC_TIME* pmtNext, void* pParam ) = 0 ; 
		virtual HRESULT __stdcall SetParam					( REFGUID rguidType, DWORD dwGroupBits, DWORD dwIndex, D_MUSIC_TIME mtTime, void *pParam ) = 0 ;
		virtual HRESULT __stdcall NonUse15					( void ) = 0 ;				// Clone( MUSIC_TIME mtStart, MUSIC_TIME mtEnd, IDirectMusicSegment** ppSegment ) = 0 ;
		virtual HRESULT __stdcall NonUse16					( void ) = 0 ;				// SetStartPoint( MUSIC_TIME mtStart ) = 0 ;
		virtual HRESULT __stdcall NonUse17					( void ) = 0 ;				// GetStartPoint( MUSIC_TIME* pmtStart ) = 0 ;
		virtual HRESULT __stdcall NonUse18					( void ) = 0 ;				// SetLoopPoints( MUSIC_TIME mtStart, MUSIC_TIME mtEnd ) = 0 ;
		virtual HRESULT __stdcall NonUse19					( void ) = 0 ;				// GetLoopPoints( MUSIC_TIME* pmtStart, MUSIC_TIME* pmtEnd ) = 0 ;
		virtual HRESULT __stdcall NonUse20					( void ) = 0 ;				// SetPChannelsUsed( DWORD dwNumPChannels, DWORD* paPChannels ) = 0 ;
	} ;

	class D_IDirectMusicSegment8 : public D_IDirectMusicSegment
	{
	public :
		virtual HRESULT __stdcall NonUse21					( void ) = 0 ;				// SetTrackConfig( REFGUID rguidTrackClassID, DWORD dwGroupBits, DWORD dwIndex, DWORD dwFlagsOn, DWORD dwFlagsOff ) = 0 ;
		virtual HRESULT __stdcall NonUse22					( void ) = 0 ;				// GetAudioPathConfig( IUnknown ** ppAudioPathConfig ) = 0 ;
		virtual HRESULT __stdcall NonUse23					( void ) = 0 ;				// Compose( MUSIC_TIME mtTime, IDirectMusicSegment* pFromSegment, IDirectMusicSegment* pToSegment, IDirectMusicSegment** ppComposedSegment ) = 0 ;
		virtual HRESULT __stdcall Download					( IUnknown *pAudioPath ) = 0 ;
		virtual HRESULT __stdcall Unload					( IUnknown *pAudioPath ) = 0 ;
	} ;

	class D_IDirectMusicLoader : public IUnknown
	{
	public :
		virtual HRESULT __stdcall GetObject					( D_DMUS_OBJECTDESC *pDesc, REFIID riid, void **ppv ) = 0 ;
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// SetObject( LPDMUS_OBJECTDESC pDesc ) = 0 ;
		virtual HRESULT __stdcall SetSearchDirectory		( REFGUID rguidClass, WCHAR *pwzPath, BOOL fClear ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// ScanDirectory( REFGUID rguidClass, WCHAR *pwzFileExtension, WCHAR *pwzScanFileName ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// CacheObject( IDirectMusicObject * pObject ) = 0 ;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// ReleaseObject( IDirectMusicObject * pObject ) = 0 ;
		virtual HRESULT __stdcall ClearCache				( REFGUID rguidClass ) = 0 ;
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// EnableCache( REFGUID rguidClass, BOOL fEnable ) = 0 ;
		virtual HRESULT __stdcall NonUse06					( void ) = 0 ;				// EnumObject( REFGUID rguidClass, DWORD dwIndex, LPDMUS_OBJECTDESC pDesc ) = 0 ;
	} ;

	class D_IDirectMusicLoader8 : public D_IDirectMusicLoader
	{
	public :
		virtual void	__stdcall NonUse07					( void ) = 0 ;				// CollectGarbage( void ) = 0 ;
		virtual HRESULT __stdcall ReleaseObjectByUnknown( IUnknown *pObject ) = 0 ;
		virtual HRESULT __stdcall LoadObjectFromFile		( REFGUID rguidClassID, REFIID iidInterfaceID, WCHAR *pwzFilePath, void **ppObject ) = 0 ;
	} ;

	class D_IDirectMusicPerformance : public IUnknown
	{
	public :
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// Init( IDirectMusic** ppDirectMusic, LPDIRECTSOUND pDirectSound, HWND hWnd ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// PlaySegment( IDirectMusicSegment* pSegment, DWORD dwFlags, __int64 i64StartTime, IDirectMusicSegmentState** ppSegmentState ) = 0 ;
		virtual HRESULT __stdcall Stop						( D_IDirectMusicSegment *pSegment, D_IDirectMusicSegmentState *pSegmentState, D_MUSIC_TIME mtTime, DWORD dwFlags ) = 0 ;
		virtual HRESULT __stdcall GetSegmentState			( D_IDirectMusicSegmentState **ppSegmentState, D_MUSIC_TIME mtTime ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// SetPrepareTime( DWORD dwMilliSeconds ) = 0 ;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// GetPrepareTime( DWORD* pdwMilliSeconds ) = 0 ;
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// SetBumperLength( DWORD dwMilliSeconds ) = 0 ;
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// GetBumperLength( DWORD* pdwMilliSeconds ) = 0 ;
		virtual HRESULT __stdcall NonUse06					( void ) = 0 ;				// SendPMsg( DMUS_PMSG* pPMSG ) = 0 ;
		virtual HRESULT __stdcall NonUse07					( void ) = 0 ;				// MusicToReferenceTime( MUSIC_TIME mtTime, REFERENCE_TIME* prtTime ) = 0 ;
		virtual HRESULT __stdcall NonUse08					( void ) = 0 ;				// ReferenceToMusicTime( REFERENCE_TIME rtTime, MUSIC_TIME* pmtTime ) = 0 ;
		virtual HRESULT __stdcall IsPlaying					( D_IDirectMusicSegment *pSegment, D_IDirectMusicSegmentState *pSegState ) = 0 ;
		virtual HRESULT __stdcall GetTime					( D_REFERENCE_TIME* prtNow, D_MUSIC_TIME *pmtNow ) = 0 ;
		virtual HRESULT __stdcall NonUse09					( void ) = 0 ;				// AllocPMsg( ULONG cb, DMUS_PMSG** ppPMSG ) = 0 ;
		virtual HRESULT __stdcall NonUse10					( void ) = 0 ;				// FreePMsg( DMUS_PMSG* pPMSG ) = 0 ;
		virtual HRESULT __stdcall NonUse11					( void ) = 0 ;				// GetGraph( IDirectMusicGraph** ppGraph ) = 0 ;
		virtual HRESULT __stdcall NonUse12					( void ) = 0 ;				// SetGraph( IDirectMusicGraph* pGraph ) = 0 ;
		virtual HRESULT __stdcall NonUse13					( void ) = 0 ;				// SetNotificationHandle( HANDLE hNotification, REFERENCE_TIME rtMinimum ) = 0 ;
		virtual HRESULT __stdcall NonUse14					( void ) = 0 ;				// GetNotificationPMsg( DMUS_NOTIFICATION_PMSG** ppNotificationPMsg ) = 0 ;
		virtual HRESULT __stdcall NonUse15					( void ) = 0 ;				// AddNotificationType( REFGUID rguidNotificationType ) = 0 ;
		virtual HRESULT __stdcall NonUse16					( void ) = 0 ;				// RemoveNotificationType( REFGUID rguidNotificationType ) = 0 ;
		virtual HRESULT __stdcall NonUse17					( void ) = 0 ;				// AddPort( IDirectMusicPort* pPort ) = 0 ;
		virtual HRESULT __stdcall NonUse18					( void ) = 0 ;				// RemovePort( IDirectMusicPort* pPort	) = 0 ;
		virtual HRESULT __stdcall NonUse19					( void ) = 0 ;				// AssignPChannelBlock( DWORD dwBlockNum, IDirectMusicPort* pPort, DWORD dwGroup	) = 0 ;
		virtual HRESULT __stdcall NonUse20					( void ) = 0 ;				// AssignPChannel( DWORD dwPChannel, IDirectMusicPort* pPort, DWORD dwGroup, DWORD dwMChannel ) = 0 ;
		virtual HRESULT __stdcall NonUse21					( void ) = 0 ;				// PChannelInfo( DWORD dwPChannel, IDirectMusicPort** ppPort, DWORD* pdwGroup, DWORD* pdwMChannel ) = 0 ;
		virtual HRESULT __stdcall NonUse22					( void ) = 0 ;				// DownloadInstrument( IDirectMusicInstrument* pInst, DWORD dwPChannel, IDirectMusicDownloadedInstrument** ppDownInst, DMUS_NOTERANGE* pNoteRanges, DWORD dwNumNoteRanges, IDirectMusicPort** ppPort, DWORD* pdwGroup, DWORD* pdwMChannel ) = 0 ;
		virtual HRESULT __stdcall NonUse23					( void ) = 0 ;				// Invalidate( MUSIC_TIME mtTime, DWORD dwFlags ) = 0 ;
		virtual HRESULT __stdcall NonUse24					( void ) = 0 ;				// GetParam( REFGUID rguidType, DWORD dwGroupBits, DWORD dwIndex, MUSIC_TIME mtTime, MUSIC_TIME* pmtNext, void* pParam ) = 0 ; 
		virtual HRESULT __stdcall NonUse25					( void ) = 0 ;				// SetParam( REFGUID rguidType, DWORD dwGroupBits, DWORD dwIndex, MUSIC_TIME mtTime, void* pParam ) = 0 ;
		virtual HRESULT __stdcall GetGlobalParam			( REFGUID rguidType, void *pParam, DWORD dwSize ) = 0 ;
		virtual HRESULT __stdcall SetGlobalParam			( REFGUID rguidType, void *pParam, DWORD dwSize ) = 0 ;
		virtual HRESULT __stdcall NonUse26					( void ) = 0 ;				// GetLatencyTime( REFERENCE_TIME* prtTime ) = 0 ;
		virtual HRESULT __stdcall NonUse27					( void ) = 0 ;				// GetQueueTime( REFERENCE_TIME* prtTime ) = 0 ;
		virtual HRESULT __stdcall NonUse28					( void ) = 0 ;				// AdjustTime( REFERENCE_TIME rtAmount ) = 0 ;
		virtual HRESULT __stdcall CloseDown					( void ) = 0 ;
		virtual HRESULT __stdcall NonUse29					( void ) = 0 ;				// GetResolvedTime( REFERENCE_TIME rtTime, REFERENCE_TIME* prtResolved, DWORD dwTimeResolveFlags ) = 0 ;
		virtual HRESULT __stdcall NonUse30					( void ) = 0 ;				// MIDIToMusic( BYTE bMIDIValue, DMUS_CHORD_KEY* pChord, BYTE bPlayMode, BYTE bChordLevel, WORD *pwMusicValue ) = 0 ;
		virtual HRESULT __stdcall NonUse31					( void ) = 0 ;				// MusicToMIDI( WORD wMusicValue, DMUS_CHORD_KEY* pChord, BYTE bPlayMode, BYTE bChordLevel, BYTE *pbMIDIValue ) = 0 ;
		virtual HRESULT __stdcall NonUse32					( void ) = 0 ;				// TimeToRhythm( MUSIC_TIME mtTime, DMUS_TIMESIGNATURE *pTimeSig, WORD *pwMeasure, BYTE *pbBeat, BYTE *pbGrid, short *pnOffset ) = 0 ;
		virtual HRESULT __stdcall NonUse33					( void ) = 0 ;				// RhythmToTime( WORD wMeasure, BYTE bBeat, BYTE bGrid, short nOffset, DMUS_TIMESIGNATURE *pTimeSig, MUSIC_TIME *pmtTime ) = 0 ;	
	} ;

	class D_IDirectMusicPerformance8 : public D_IDirectMusicPerformance
	{
	public :
		virtual HRESULT __stdcall InitAudio					( D_IDirectMusic **ppDirectMusic, D_IDirectSound **ppDirectSound, HWND hWnd, DWORD dwDefaultPathType, DWORD dwPChannelCount, DWORD dwFlags, D_DMUS_AUDIOPARAMS *pParams ) = 0 ;
		virtual HRESULT __stdcall PlaySegmentEx				( IUnknown *pSource, WCHAR *pwzSegmentName, IUnknown *pTransition, DWORD dwFlags, __int64 i64StartTime, D_IDirectMusicSegmentState **ppSegmentState, IUnknown *pFrom, IUnknown *pAudioPath ) = 0 ;
		virtual HRESULT __stdcall StopEx					( IUnknown *pObjectToStop, __int64 i64StopTime, DWORD dwFlags ) = 0 ;
		virtual HRESULT __stdcall NonUse34					( void ) = 0 ;				// ClonePMsg( DMUS_PMSG* pSourcePMSG, DMUS_PMSG** ppCopyPMSG ) = 0 ;
		virtual HRESULT __stdcall NonUse35					( void ) = 0 ;				// CreateAudioPath( IUnknown *pSourceConfig, BOOL fActivate, IDirectMusicAudioPath **ppNewPath ) = 0 ;
		virtual HRESULT __stdcall NonUse36					( void ) = 0 ;				// CreateStandardAudioPath( DWORD dwType, DWORD dwPChannelCount, BOOL fActivate, IDirectMusicAudioPath **ppNewPath ) = 0 ;
		virtual HRESULT __stdcall NonUse37					( void ) = 0 ;				// SetDefaultAudioPath( IDirectMusicAudioPath *pAudioPath ) = 0 ;
		virtual HRESULT __stdcall NonUse38					( void ) = 0 ;				// GetDefaultAudioPath( IDirectMusicAudioPath **ppAudioPath ) = 0 ;
		virtual HRESULT __stdcall NonUse39					( void ) = 0 ;				// GetParamEx( REFGUID rguidType, DWORD dwTrackID, DWORD dwGroupBits, DWORD dwIndex, MUSIC_TIME mtTime, MUSIC_TIME* pmtNext, void* pParam ) = 0 ;
	} ;

	// ÇcÇâÇíÇÖÇÉÇîÇcÇíÇÅÇó -------------------------------------------------------

	#define D_DD_OK									S_OK

	#define D_DD_ROP_SPACE							(256/32)
	#define D_MAX_DDDEVICEID_STRING					(512)

	#define D_DDPF_ALPHAPIXELS						(0x00000001l)
	#define D_DDPF_ALPHA							(0x00000002l)
	#define D_DDPF_FOURCC							(0x00000004l)
	#define D_DDPF_RGB								(0x00000040l)
	#define D_DDPF_ZBUFFER							(0x00000400l)
	#define D_DDPF_LUMINANCE						(0x00020000l)
	#define D_DDPF_BUMPLUMINANCE					(0x00040000l)
	#define D_DDPF_BUMPDUDV							(0x00080000l)
	#define D_DDPF_RGBTOYUV							(0x000001001)
	#define D_DDPF_YUV								(0x000002001)

	#define D_DDWAITVB_BLOCKBEGIN					(0x00000001l)

	#define D_DDCAPS_ALIGNBOUNDARYDEST				(0x00000002l)
	#define D_DDCAPS_ALIGNSIZEDEST					(0x00000004l)
	#define D_DDCAPS_ALIGNBOUNDARYSRC				(0x00000008l)
	#define D_DDCAPS_ALIGNSIZESRC					(0x00000010l)

	#define D_DDENUMSURFACES_ALL					(0x00000001l)
	#define D_DDENUMSURFACES_MATCH					(0x00000002l)
	#define D_DDENUMSURFACES_NOMATCH				(0x00000004l)
	#define D_DDENUMSURFACES_CANBECREATED			(0x00000008l)
	#define D_DDENUMSURFACES_DOESEXIST				(0x00000010l)

	#define D_DDOVER_SHOW							(0x00004000l)
	#define D_DDOVER_HIDE							(0x00000200l)

	#define D_DDSCAPS_BACKBUFFER					(0x00000004l)
	#define D_DDSCAPS_COMPLEX						(0x00000008l)
	#define D_DDSCAPS_FLIP							(0x00000010l)
	#define D_DDSCAPS_OFFSCREENPLAIN				(0x00000040l)
	#define D_DDSCAPS_OVERLAY						(0x00000080l)
	#define D_DDSCAPS_PRIMARYSURFACE				(0x00000200l)
	#define D_DDSCAPS_SYSTEMMEMORY					(0x00000800l)
	#define D_DDSCAPS_TEXTURE						(0x00001000l)
	#define D_DDSCAPS_3DDEVICE						(0x00002000l)
	#define D_DDSCAPS_VIDEOMEMORY					(0x00004000l)
	#define D_DDSCAPS_ZBUFFER						(0x00020000l)
	#define D_DDSCAPS_LOCALVIDMEM					(0x10000000l)

	#define D_DDCKEY_SRCBLT							(0x00000008l)

	#define D_DDFLIP_NOVSYNC						(0x00000008L)
	#define D_DDFLIP_WAIT							(0x00000001L)

	#define D_DDPCAPS_8BIT							(0x00000004l)

	#define D_DDSCAPS2_TEXTUREMANAGE				(0x00000010L)

	#define D_DDBLT_COLORFILL						(0x00000400l)
	#define D_DDBLT_WAIT							(0x01000000l)
	#define D_DDBLT_DEPTHFILL						(0x02000000l)

	#define D_DDENUM_ATTACHEDSECONDARYDEVICES		(0x00000001L)
	#define D_DDENUMRET_CANCEL						(0)
	#define D_DDENUMRET_OK							(1)

	#define D_DDLOCK_WAIT							(0x00000001L)
	#define D_DDLOCK_READONLY						(0x00000010L)
	#define D_DDLOCK_WRITEONLY						(0x00000020L)
	#define D_DDLOCK_NOSYSLOCK						(0x00000800L)

	#define D_DDBLTFAST_NOCOLORKEY					(0x00000000)
	#define D_DDBLTFAST_SRCCOLORKEY					(0x00000001)
	#define D_DDBLTFAST_DESTCOLORKEY				(0x00000002)
	#define D_DDBLTFAST_WAIT						(0x00000010)
	#define D_DDBLTFAST_DONOTWAIT					(0x00000020)

	#define D_DDSD_CAPS								(0x00000001l)
	#define D_DDSD_HEIGHT							(0x00000002l)
	#define D_DDSD_WIDTH							(0x00000004l)
	#define D_DDSD_PITCH							(0x00000008l)
	#define D_DDSD_BACKBUFFERCOUNT					(0x00000020l)
	#define D_DDSD_PIXELFORMAT						(0x00001000l)
	#define D_DDSD_TEXTURESTAGE						(0x00100000l)

	#define D_DDBD_16								(0x00000400l)
	#define D_DDBD_32								(0x00000100l)

	#define D_DDSCL_FULLSCREEN						(0x00000001l)
	#define D_DDSCL_NORMAL							(0x00000008l)
	#define D_DDSCL_EXCLUSIVE						(0x00000010l)
	#define D_DDSCL_MULTITHREADED					(0x00000400l)

	#define D_MAKE_DDHRESULT( code )				MAKE_HRESULT( 1, 0x876, code )
	#define D_DDERR_SURFACEBUSY						D_MAKE_DDHRESULT( 430 )
	#define D_DDERR_SURFACELOST						D_MAKE_DDHRESULT( 450 )
	#define D_DDERR_HWNDSUBCLASSED					D_MAKE_DDHRESULT( 570 )
	#define D_DDERR_HWNDALREADYSET					D_MAKE_DDHRESULT( 571 )
	#define D_DDERR_EXCLUSIVEMODEALREADYSET			D_MAKE_DDHRESULT( 581 )

	typedef struct tagD_DDSCAPS2
	{
		DWORD										dwCaps;
		DWORD										dwCaps2;
		DWORD										dwCaps3;
		union
		{
			DWORD									dwCaps4;
			DWORD									dwVolumeDepth;
		} ;
	} D_DDSCAPS2 ;

	typedef struct tagD_DDSCAPS
	{
		DWORD										dwCaps;
	} D_DDSCAPS ;

	typedef struct tagD_DDCAPS
	{
		DWORD										dwSize;
		DWORD										dwCaps;
		DWORD										dwCaps2;
		DWORD										dwCKeyCaps;
		DWORD										dwFXCaps;
		DWORD										dwFXAlphaCaps;
		DWORD										dwPalCaps;
		DWORD										dwSVCaps;
		DWORD										dwAlphaBltConstBitDepths;
		DWORD										dwAlphaBltPixelBitDepths;
		DWORD										dwAlphaBltSurfaceBitDepths;
		DWORD										dwAlphaOverlayConstBitDepths;
		DWORD										dwAlphaOverlayPixelBitDepths;
		DWORD										dwAlphaOverlaySurfaceBitDepths;
		DWORD										dwZBufferBitDepths;
		DWORD										dwVidMemTotal;
		DWORD										dwVidMemFree;
		DWORD										dwMaxVisibleOverlays;
		DWORD										dwCurrVisibleOverlays;
		DWORD										dwNumFourCCCodes;
		DWORD										dwAlignBoundarySrc;
		DWORD										dwAlignSizeSrc;
		DWORD										dwAlignBoundaryDest;
		DWORD										dwAlignSizeDest;
		DWORD										dwAlignStrideAlign;
		DWORD										dwRops[D_DD_ROP_SPACE];
		D_DDSCAPS									ddsOldCaps;
		DWORD										dwMinOverlayStretch;
		DWORD										dwMaxOverlayStretch;
		DWORD										dwMinLiveVideoStretch;
		DWORD										dwMaxLiveVideoStretch;
		DWORD										dwMinHwCodecStretch;
		DWORD										dwMaxHwCodecStretch;
		DWORD										dwReserved1;
		DWORD										dwReserved2;
		DWORD										dwReserved3;
		DWORD										dwSVBCaps;
		DWORD										dwSVBCKeyCaps;
		DWORD										dwSVBFXCaps;
		DWORD										dwSVBRops[D_DD_ROP_SPACE];
		DWORD										dwVSBCaps;
		DWORD										dwVSBCKeyCaps;
		DWORD										dwVSBFXCaps;
		DWORD										dwVSBRops[D_DD_ROP_SPACE];
		DWORD										dwSSBCaps;
		DWORD										dwSSBCKeyCaps;
		DWORD										dwSSBFXCaps;
		DWORD										dwSSBRops[D_DD_ROP_SPACE];
		DWORD										dwMaxVideoPorts;
		DWORD										dwCurrVideoPorts;
		DWORD										dwSVBCaps2;
		DWORD										dwNLVBCaps;
		DWORD										dwNLVBCaps2;
		DWORD										dwNLVBCKeyCaps;
		DWORD										dwNLVBFXCaps;
		DWORD										dwNLVBRops[D_DD_ROP_SPACE];
		// DirectX6
		D_DDSCAPS2									ddsCaps;
	} D_DDCAPS ;

	typedef struct tagD_DDPIXELFORMAT
	{
		DWORD										dwSize;
		DWORD										dwFlags;
		DWORD										dwFourCC;
		union
		{
			DWORD									dwRGBBitCount;
			DWORD									dwYUVBitCount;
			DWORD									dwZBufferBitDepth;
			DWORD									dwAlphaBitDepth;
			DWORD									dwLuminanceBitCount;
			DWORD									dwBumpBitCount;
			DWORD									dwPrivateFormatBitCount;
		} ;
		union
		{
			DWORD									dwRBitMask;
			DWORD									dwYBitMask;
			DWORD									dwStencilBitDepth;
			DWORD									dwLuminanceBitMask;
			DWORD									dwBumpDuBitMask;
			DWORD									dwOperations;
		} ;
		union
		{
			DWORD									dwGBitMask;
			DWORD									dwUBitMask;
			DWORD									dwZBitMask;
			DWORD									dwBumpDvBitMask;
			struct
			{
				WORD								wFlipMSTypes;
				WORD								wBltMSTypes;
			} MultiSampleCaps;

		} ;
		union
		{
			DWORD									dwBBitMask;
			DWORD									dwVBitMask;
			DWORD									dwStencilBitMask;
			DWORD									dwBumpLuminanceBitMask;
		} ;
		union
		{
			DWORD									dwRGBAlphaBitMask;
			DWORD									dwYUVAlphaBitMask;
			DWORD									dwLuminanceAlphaBitMask;
			DWORD									dwRGBZBitMask;
			DWORD									dwYUVZBitMask;
		} ;
	} D_DDPIXELFORMAT ;

	typedef struct tagD_DDCOLORKEY
	{
		DWORD										dwColorSpaceLowValue;
		DWORD										dwColorSpaceHighValue;
	} D_DDCOLORKEY ;

	typedef struct tagD_DDSURFACEDESC
	{
		DWORD										dwSize;
		DWORD										dwFlags;
		DWORD										dwHeight;
		DWORD										dwWidth;
		union
		{
			LONG									lPitch;
			DWORD									dwLinearSize;
		} ;
		DWORD										dwBackBufferCount;
		union
		{
			DWORD									dwMipMapCount;
			DWORD									dwZBufferBitDepth;
			DWORD									dwRefreshRate;
		} ;
		DWORD										dwAlphaBitDepth;
		DWORD										dwReserved;
		LPVOID										lpSurface;
		D_DDCOLORKEY								ddckCKDestOverlay;
		D_DDCOLORKEY								ddckCKDestBlt;
		D_DDCOLORKEY								ddckCKSrcOverlay;
		D_DDCOLORKEY								ddckCKSrcBlt;
		D_DDPIXELFORMAT								ddpfPixelFormat;
		D_DDSCAPS									ddsCaps;
	} D_DDSURFACEDESC ;

	typedef struct tagD_DDSURFACEDESC2
	{
		DWORD										dwSize;
		DWORD										dwFlags;
		DWORD										dwHeight;
		DWORD										dwWidth;
		union
		{
			LONG									lPitch;
			DWORD									dwLinearSize;
		} ;
		union
		{
			DWORD									dwBackBufferCount;
			DWORD									dwDepth;
		} ;
		union
		{
			DWORD									dwMipMapCount;
			DWORD									dwRefreshRate;
			DWORD									dwSrcVBHandle;
		} ;
		DWORD										dwAlphaBitDepth;
		DWORD										dwReserved;
		LPVOID										lpSurface;
		union
		{
			D_DDCOLORKEY							ddckCKDestOverlay;
			DWORD									dwEmptyFaceColor;
		} ;
		D_DDCOLORKEY								ddckCKDestBlt;
		D_DDCOLORKEY								ddckCKSrcOverlay;
		D_DDCOLORKEY								ddckCKSrcBlt;
		union
		{
			D_DDPIXELFORMAT							ddpfPixelFormat;
			DWORD									dwFVF;
		} ;
		D_DDSCAPS2									ddsCaps;
		DWORD										dwTextureStage;
	} D_DDSURFACEDESC2 ;

	typedef struct tagD_DDDEVICEIDENTIFIER2
	{
		char										szDriver[D_MAX_DDDEVICEID_STRING];
		char										szDescription[D_MAX_DDDEVICEID_STRING];

		LARGE_INTEGER								liDriverVersion;

		DWORD										dwVendorId;
		DWORD										dwDeviceId;
		DWORD										dwSubSysId;
		DWORD										dwRevision;
		GUID										guidDeviceIdentifier;
		DWORD										dwWHQLLevel;

	} D_DDDEVICEIDENTIFIER2 ;

	typedef struct tagD_DDBLTFX
	{
		DWORD										dwSize;
		DWORD										dwDDFX;
		DWORD										dwROP;
		DWORD										dwDDROP;
		DWORD										dwRotationAngle;
		DWORD										dwZBufferOpCode;
		DWORD										dwZBufferLow;
		DWORD										dwZBufferHigh;
		DWORD										dwZBufferBaseDest;
		DWORD										dwZDestConstBitDepth;
		union
		{
			DWORD									dwZDestConst;
			class D_IDirectDrawSurface 				*lpDDSZBufferDest;
		} ;
		DWORD										dwZSrcConstBitDepth;
		union
		{
			DWORD									dwZSrcConst;
			class D_IDirectDrawSurface 				*lpDDSZBufferSrc;
		} ;
		DWORD										dwAlphaEdgeBlendBitDepth;
		DWORD										dwAlphaEdgeBlend;
		DWORD										dwReserved;
		DWORD										dwAlphaDestConstBitDepth;
		union
		{
			DWORD									dwAlphaDestConst;
			class D_IDirectDrawSurface 				*lpDDSAlphaDest;
		} ;
		DWORD										dwAlphaSrcConstBitDepth;
		union
		{
			DWORD									dwAlphaSrcConst;
			class D_IDirectDrawSurface 				*lpDDSAlphaSrc;
		} ;
		union
		{
			DWORD									dwFillColor;
			DWORD									dwFillDepth;
			DWORD									dwFillPixel;
			class D_IDirectDrawSurface 				*lpDDSPattern;
		} ;
		D_DDCOLORKEY								ddckDestColorkey;
		D_DDCOLORKEY								ddckSrcColorkey;
	} D_DDBLTFX ;

	typedef struct tagD_DDOVERLAYFX
	{
		DWORD										dwSize;
		DWORD										dwAlphaEdgeBlendBitDepth;
		DWORD										dwAlphaEdgeBlend;
		DWORD										dwReserved;
		DWORD										dwAlphaDestConstBitDepth;
		union
		{
			DWORD									dwAlphaDestConst;
			class D_IDirectDrawSurface 				*lpDDSAlphaDest;
		} ;
		DWORD										dwAlphaSrcConstBitDepth;
		union
		{
			DWORD									dwAlphaSrcConst;
			class D_IDirectDrawSurface 				*lpDDSAlphaSrc;
		} ;
		D_DDCOLORKEY								dckDestColorkey;
		D_DDCOLORKEY								dckSrcColorkey;
		DWORD										dwDDFX;
		DWORD										dwFlags;
	} D_DDOVERLAYFX ;


	typedef HRESULT ( FAR PASCAL * LPD_DDENUMSURFACESCALLBACK7 )	( class D_IDirectDrawSurface7 *, D_DDSURFACEDESC2 *, void * ) ;
	typedef HRESULT ( FAR PASCAL * LPD_DDENUMSURFACESCALLBACK2 )	( class D_IDirectDrawSurface4 *, D_DDSURFACEDESC2 *, void * ) ;
	typedef HRESULT ( FAR PASCAL * LPD_DDENUMSURFACESCALLBACK )		( class D_IDirectDrawSurface *,  D_DDSURFACEDESC *,  void * ) ;
	typedef BOOL 	( FAR PASCAL * LPD_DDENUMCALLBACKEXA )			( GUID *, LPSTR,  LPSTR,  void *, void * ) ;
	typedef BOOL 	( FAR PASCAL * LPD_DDENUMCALLBACKEXW )			( GUID *, LPWSTR, LPWSTR, void *, void * ) ;

	class D_IDirectDraw : public IUnknown
	{
	public :
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// Compact( void ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// CreateClipper( DWORD, LPDIRECTDRAWCLIPPER FAR*, IUnknown FAR * ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// CreatePalette( DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE FAR*, IUnknown FAR * ) = 0 ;
		virtual HRESULT __stdcall CreateSurface				( D_DDSURFACEDESC *, D_IDirectDrawSurface **, IUnknown * ) = 0 ;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// DuplicateSurface( LPDIRECTDRAWSURFACE, LPDIRECTDRAWSURFACE FAR * ) = 0 ;
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// EnumDisplayModes( DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMMODESCALLBACK ) = 0 ;
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// EnumSurfaces( DWORD, LPDDSURFACEDESC, LPVOID,LPDDENUMSURFACESCALLBACK ) = 0 ;
		virtual HRESULT __stdcall NonUse06					( void ) = 0 ;				// FlipToGDISurface( void ) = 0 ;
		virtual HRESULT __stdcall GetCaps					( D_DDCAPS *, D_DDCAPS * ) = 0 ;
		virtual HRESULT __stdcall NonUse07					( void ) = 0 ;				// GetDisplayMode( LPDDSURFACEDESC ) = 0 ;
		virtual HRESULT __stdcall NonUse08					( void ) = 0 ;				// GetFourCCCodes( LPDWORD, LPDWORD	) = 0 ;
		virtual HRESULT __stdcall NonUse09					( void ) = 0 ;				// GetGDISurface( LPDIRECTDRAWSURFACE FAR * ) = 0 ;
		virtual HRESULT __stdcall NonUse10					( void ) = 0 ;				// GetMonitorFrequency( LPDWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse11					( void ) = 0 ;				// GetScanLine( LPDWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse12					( void ) = 0 ;				// GetVerticalBlankStatus( LPBOOL ) = 0 ;
		virtual HRESULT __stdcall NonUse13					( void ) = 0 ;				// Initialize( GUID FAR * ) = 0 ;
		virtual HRESULT __stdcall NonUse14					( void ) = 0 ;				// RestoreDisplayMode( void ) = 0 ;
		virtual HRESULT __stdcall SetCooperativeLevel		( HWND, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse15					( void ) = 0 ;				// SetDisplayMode( DWORD, DWORD,DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse16					( void ) = 0 ;				// WaitForVerticalBlank( DWORD, HANDLE ) = 0 ;
	} ;

	class D_IDirectDraw2 : public D_IDirectDraw
	{
	public :
		virtual HRESULT __stdcall GetAvailableVidMem		( D_DDSCAPS2 *, DWORD *, DWORD * ) = 0 ;
	} ;

	class D_IDirectDraw4 : public IUnknown
	{
	public :
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// Compact( void ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// CreateClipper( DWORD, LPDIRECTDRAWCLIPPER FAR*, IUnknown FAR * ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// CreatePalette( DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE FAR*, IUnknown FAR * ) = 0 ;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// CreateSurface(	LPDDSURFACEDESC2, LPDIRECTDRAWSURFACE4 FAR *, IUnknown FAR * ) = 0 ;
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// DuplicateSurface( LPDIRECTDRAWSURFACE4, LPDIRECTDRAWSURFACE4 FAR * ) = 0 ;
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// EnumDisplayModes( DWORD, LPDDSURFACEDESC2, LPVOID, LPDDENUMMODESCALLBACK2 ) = 0 ;
		virtual HRESULT __stdcall NonUse06					( void ) = 0 ;				// EnumSurfaces( DWORD, LPDDSURFACEDESC2, LPVOID,LPDDENUMSURFACESCALLBACK2 ) = 0 ;
		virtual HRESULT __stdcall NonUse07					( void ) = 0 ;				// FlipToGDISurface( void ) = 0 ;
		virtual HRESULT __stdcall NonUse08					( void ) = 0 ;				// GetCaps( LPDDCAPS, LPDDCAPS ) = 0 ;
		virtual HRESULT __stdcall NonUse09					( void ) = 0 ;				// GetDisplayMode( LPDDSURFACEDESC2 ) = 0 ;
		virtual HRESULT __stdcall NonUse10					( void ) = 0 ;				// GetFourCCCodes( LPDWORD, LPDWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse11					( void ) = 0 ;				// GetGDISurface( LPDIRECTDRAWSURFACE4 FAR * ) = 0 ;
		virtual HRESULT __stdcall NonUse12					( void ) = 0 ;				// GetMonitorFrequency( LPDWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse13					( void ) = 0 ;				// GetScanLine( LPDWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse14					( void ) = 0 ;				// GetVerticalBlankStatus( LPBOOL ) = 0 ;
		virtual HRESULT __stdcall NonUse15					( void ) = 0 ;				// Initialize( GUID FAR * ) = 0 ;
		virtual HRESULT __stdcall NonUse16					( void ) = 0 ;				// RestoreDisplayMode( void ) = 0 ;
		virtual HRESULT __stdcall NonUse17					( void ) = 0 ;				// SetCooperativeLevel( HWND, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse18					( void ) = 0 ;				// SetDisplayMode( DWORD, DWORD,DWORD, DWORD, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse19					( void ) = 0 ;				// WaitForVerticalBlank( DWORD, HANDLE ) = 0 ;

		virtual HRESULT __stdcall NonUse20					( void ) = 0 ;				// GetAvailableVidMem( LPDDSCAPS2, LPDWORD, LPDWORD ) = 0 ;

		virtual HRESULT __stdcall NonUse21					( void ) = 0 ;				// GetSurfaceFromDC( HDC, LPDIRECTDRAWSURFACE4 * ) = 0 ;
		virtual HRESULT __stdcall NonUse22					( void ) = 0 ;				// RestoreAllSurfaces( void ) = 0 ;
		virtual HRESULT __stdcall NonUse23					( void ) = 0 ;				// TestCooperativeLevel( void ) = 0 ;
		virtual HRESULT __stdcall NonUse24					( void ) = 0 ;				// GetDeviceIdentifier( LPDDDEVICEIDENTIFIER, DWORD ) = 0 ;
	} ;

	class D_IDirectDraw7 : public IUnknown
	{
	public :
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// Compact( void ) = 0 ;
		virtual HRESULT __stdcall CreateClipper				( DWORD, class D_IDirectDrawClipper **, IUnknown * ) = 0 ;
		virtual HRESULT __stdcall CreatePalette				( DWORD, LPPALETTEENTRY, class D_IDirectDrawPalette **, IUnknown * ) = 0 ;
		virtual HRESULT __stdcall CreateSurface				( D_DDSURFACEDESC2 *, D_IDirectDrawSurface7 **, IUnknown * ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// DuplicateSurface( D_IDirectDrawSurface7 *, D_IDirectDrawSurface7 * FAR * ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// EnumDisplayModes( void ) = 0 ;			// EnumDisplayModes( DWORD, LPDDSURFACEDESC2, LPVOID, LPDDENUMMODESCALLBACK2 ) = 0 ;
		virtual HRESULT __stdcall EnumSurfaces				( DWORD, D_DDSURFACEDESC2 *, LPVOID, LPD_DDENUMSURFACESCALLBACK7 ) = 0 ;
		virtual HRESULT __stdcall FlipToGDISurface			( void ) = 0 ;
		virtual HRESULT __stdcall GetCaps					( D_DDCAPS *, D_DDCAPS * ) = 0 ;
		virtual HRESULT __stdcall GetDisplayMode			( D_DDSURFACEDESC2 * ) = 0 ;
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// GetFourCCCodes( LPDWORD, LPDWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// GetGDISurface( D_IDirectDrawSurface7 * FAR * ) = 0 ;
		virtual HRESULT __stdcall NonUse06					( void ) = 0 ;				// GetMonitorFrequency( LPDWORD ) = 0 ;
		virtual HRESULT __stdcall GetScanLine				( DWORD * ) = 0 ;
		virtual HRESULT __stdcall GetVerticalBlankStatus	( BOOL * ) = 0 ;
		virtual HRESULT __stdcall Initialize				( GUID * ) = 0 ;
		virtual HRESULT __stdcall RestoreDisplayMode		( void ) = 0 ;
		virtual HRESULT __stdcall SetCooperativeLevel		( HWND, DWORD ) = 0 ;
		virtual HRESULT __stdcall SetDisplayMode			( DWORD, DWORD,DWORD, DWORD, DWORD ) = 0 ;
		virtual HRESULT __stdcall WaitForVerticalBlank		( DWORD, HANDLE ) = 0 ;

		virtual HRESULT __stdcall GetAvailableVidMem		( D_DDSCAPS2 *, DWORD *, DWORD * ) = 0 ;

		virtual HRESULT __stdcall NonUse07					( void ) = 0 ;				// GetSurfaceFromDC( HDC, D_IDirectDrawSurface7 * * ) = 0 ;
		virtual HRESULT __stdcall NonUse08					( void ) = 0 ;				// RestoreAllSurfaces( void ) = 0 ;
		virtual HRESULT __stdcall NonUse09					( void ) = 0 ;				// TestCooperativeLevel( void ) = 0 ;
		virtual HRESULT __stdcall GetDeviceIdentifier		( D_DDDEVICEIDENTIFIER2 *, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse10					( void ) = 0 ;				// StartModeTest( LPSIZE, DWORD, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse11					( void ) = 0 ;				// EvaluateMode( DWORD, DWORD * ) = 0 ;
	} ;

	class D_IDirectDrawSurface : public IUnknown
	{
	public :
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// AddAttachedSurface( LPDIRECTDRAWSURFACE ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// AddOverlayDirtyRect( LPRECT ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// Blt( LPRECT,LPDIRECTDRAWSURFACE, LPRECT,DWORD, LPDDBLTFX ) = 0 ;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// BltBatch( LPDDBLTBATCH, DWORD, DWORD	) = 0 ;
		virtual HRESULT __stdcall BltFast					( DWORD, DWORD, D_IDirectDrawSurface *, LPRECT, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// DeleteAttachedSurface( DWORD,LPDIRECTDRAWSURFACE ) = 0 ;
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// EnumAttachedSurfaces( LPVOID,LPDDENUMSURFACESCALLBACK ) = 0 ;
		virtual HRESULT __stdcall NonUse06					( void ) = 0 ;				// EnumOverlayZOrders( DWORD,LPVOID,LPDDENUMSURFACESCALLBACK7 ) = 0 ;
		virtual HRESULT __stdcall NonUse07					( void ) = 0 ;				// Flip( LPDIRECTDRAWSURFACE, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse08					( void ) = 0 ;				// GetAttachedSurface( LPDDSCAPS, LPDIRECTDRAWSURFACE FAR * ) = 0 ;
		virtual HRESULT __stdcall NonUse09					( void ) = 0 ;				// GetBltStatus( DWORD ) = 0 ;
		virtual HRESULT __stdcall GetCaps					( D_DDSCAPS * ) = 0 ;
		virtual HRESULT __stdcall NonUse10					( void ) = 0 ;				// GetClipper( LPDIRECTDRAWCLIPPER FAR* ) = 0 ;
		virtual HRESULT __stdcall NonUse11					( void ) = 0 ;				// GetColorKey( DWORD, LPDDCOLORKEY ) = 0 ;
		virtual HRESULT __stdcall NonUse12					( void ) = 0 ;				// GetDC( HDC FAR * ) = 0 ;
		virtual HRESULT __stdcall NonUse13					( void ) = 0 ;				// GetFlipStatus( DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse14					( void ) = 0 ;				// GetOverlayPosition( LPLONG, LPLONG	) = 0 ;
		virtual HRESULT __stdcall NonUse15					( void ) = 0 ;				// GetPalette( LPDIRECTDRAWPALETTE FAR* ) = 0 ;
		virtual HRESULT __stdcall GetPixelFormat			( D_DDPIXELFORMAT * ) = 0 ;
		virtual HRESULT __stdcall GetSurfaceDesc			( D_DDSURFACEDESC * ) = 0 ;
		virtual HRESULT __stdcall Initialize				( D_IDirectDraw *, D_DDSURFACEDESC * ) = 0 ;
		virtual HRESULT __stdcall NonUse16					( void ) = 0 ;				// IsLost( void	) = 0 ;
		virtual HRESULT __stdcall Lock						( LPRECT, D_DDSURFACEDESC *, DWORD, HANDLE ) = 0 ;
		virtual HRESULT __stdcall NonUse17					( void ) = 0 ;				// ReleaseDC( HDC ) = 0 ;
		virtual HRESULT __stdcall Restore					( void ) = 0 ;
		virtual HRESULT __stdcall NonUse18					( void ) = 0 ;				// SetClipper( LPDIRECTDRAWCLIPPER ) = 0 ;
		virtual HRESULT __stdcall NonUse19					( void ) = 0 ;				// SetColorKey( DWORD, LPDDCOLORKEY ) = 0 ;
		virtual HRESULT __stdcall NonUse20					( void ) = 0 ;				// SetOverlayPosition( LONG, LONG	) = 0 ;
		virtual HRESULT __stdcall NonUse21					( void ) = 0 ;				// SetPalette( LPDIRECTDRAWPALETTE ) = 0 ;
		virtual HRESULT __stdcall Unlock					( LPRECT ) = 0 ;
		virtual HRESULT __stdcall NonUse22					( void ) = 0 ;				// UpdateOverlay( LPRECT, LPDIRECTDRAWSURFACE,LPRECT,DWORD, LPDDOVERLAYFX ) = 0 ;
		virtual HRESULT __stdcall NonUse23					( void ) = 0 ;				// UpdateOverlayDisplay( DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse24					( void ) = 0 ;				// UpdateOverlayZOrder( DWORD, LPDIRECTDRAWSURFACE ) = 0 ;
	} ;

	class D_IDirectDrawSurface2 : public D_IDirectDrawSurface
	{
	public :
		virtual HRESULT __stdcall NonUse25					( void ) = 0 ;				// GetDDInterface( LPVOID FAR * ) = 0 ;
		virtual HRESULT __stdcall PageLock					( DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse27					( void ) = 0 ;				// PageUnlock( DWORD ) = 0 ;
	} ;

	class D_IDirectDrawSurface3 : public D_IDirectDrawSurface2
	{
	public :
		virtual HRESULT __stdcall NonUse28					( void ) = 0 ;				// SetSurfaceDesc( LPDDSURFACEDESC2, DWORD ) = 0 ;
	} ;

	class D_IDirectDrawSurface4 : public IUnknown
	{
	public :
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// AddAttachedSurface( LPDIRECTDRAWSURFACE4 ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// AddOverlayDirtyRect( LPRECT ) = 0 ;
		virtual HRESULT __stdcall Blt						( LPRECT, D_IDirectDrawSurface4 *, LPRECT, DWORD, D_DDBLTFX * ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// BltBatch( LPDDBLTBATCH, DWORD, DWORD	) = 0 ;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// BltFast( DWORD,DWORD,LPDIRECTDRAWSURFACE4, LPRECT,DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// DeleteAttachedSurface( DWORD,LPDIRECTDRAWSURFACE4 ) = 0 ;
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// EnumAttachedSurfaces( LPVOID,LPDDENUMSURFACESCALLBACK2 ) = 0 ;
		virtual HRESULT __stdcall NonUse06					( void ) = 0 ;				// EnumOverlayZOrders( DWORD,LPVOID,LPDDENUMSURFACESCALLBACK2 ) = 0 ;
		virtual HRESULT __stdcall NonUse07					( void ) = 0 ;				// Flip( LPDIRECTDRAWSURFACE4, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse08					( void ) = 0 ;				// GetAttachedSurface( LPDDSCAPS2, LPDIRECTDRAWSURFACE4 FAR * ) = 0 ;
		virtual HRESULT __stdcall NonUse09					( void ) = 0 ;				// GetBltStatus( DWORD ) = 0 ;
		virtual HRESULT __stdcall GetCaps					( D_DDSCAPS2 * ) = 0 ;
		virtual HRESULT __stdcall NonUse10					( void ) = 0 ;				// GetClipper( LPDIRECTDRAWCLIPPER FAR* ) = 0 ;
		virtual HRESULT __stdcall NonUse11					( void ) = 0 ;				// GetColorKey( DWORD, LPDDCOLORKEY ) = 0 ;
		virtual HRESULT __stdcall NonUse12					( void ) = 0 ;				// GetDC( HDC FAR * ) = 0 ;
		virtual HRESULT __stdcall NonUse13					( void ) = 0 ;				// GetFlipStatus( DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse14					( void ) = 0 ;				// GetOverlayPosition( LPLONG, LPLONG	) = 0 ;
		virtual HRESULT __stdcall NonUse15					( void ) = 0 ;				// GetPalette( LPDIRECTDRAWPALETTE FAR* ) = 0 ;
		virtual HRESULT __stdcall NonUse16					( void ) = 0 ;				// GetPixelFormat( LPDDPIXELFORMAT ) = 0 ;
		virtual HRESULT __stdcall GetSurfaceDesc			( D_DDSURFACEDESC2 * ) = 0 ;
		virtual HRESULT __stdcall NonUse17					( void ) = 0 ;				// Initialize( LPDIRECTDRAW, LPDDSURFACEDESC2 ) = 0 ;
		virtual HRESULT __stdcall IsLost					( void ) = 0 ;
		virtual HRESULT __stdcall Lock						( LPRECT, D_DDSURFACEDESC2 *, DWORD, HANDLE ) = 0 ;
		virtual HRESULT __stdcall NonUse18					( void ) = 0 ;				// ReleaseDC( HDC ) = 0 ;
		virtual HRESULT __stdcall Restore					( void ) = 0 ;
		virtual HRESULT __stdcall NonUse19					( void ) = 0 ;				// SetClipper( LPDIRECTDRAWCLIPPER ) = 0 ;
		virtual HRESULT __stdcall NonUse20					( void ) = 0 ;				// SetColorKey( DWORD, LPDDCOLORKEY ) = 0 ;
		virtual HRESULT __stdcall NonUse21					( void ) = 0 ;				// SetOverlayPosition( LONG, LONG	) = 0 ;
		virtual HRESULT __stdcall NonUse22					( void ) = 0 ;				// SetPalette( LPDIRECTDRAWPALETTE ) = 0 ;
		virtual HRESULT __stdcall Unlock					( LPRECT ) = 0 ;
		virtual HRESULT __stdcall NonUse23					( void ) = 0 ;				// UpdateOverlay( LPRECT, LPDIRECTDRAWSURFACE4,LPRECT,DWORD, LPDDOVERLAYFX ) = 0 ;
		virtual HRESULT __stdcall NonUse24					( void ) = 0 ;				// UpdateOverlayDisplay( DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse25					( void ) = 0 ;				// UpdateOverlayZOrder( DWORD, LPDIRECTDRAWSURFACE4 ) = 0 ;

		virtual HRESULT __stdcall NonUse26					( void ) = 0 ;				// GetDDInterface( LPVOID FAR * ) = 0 ;
		virtual HRESULT __stdcall PageLock					( DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse28					( void ) = 0 ;				// PageUnlock( DWORD ) = 0 ;
		
		virtual HRESULT __stdcall NonUse29					( void ) = 0 ;				// SetSurfaceDesc( LPDDSURFACEDESC2, DWORD ) = 0 ;

		virtual HRESULT __stdcall NonUse30					( void ) = 0 ;				// SetPrivateData( REFGUID, LPVOID, DWORD, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse31					( void ) = 0 ;				// GetPrivateData( REFGUID, LPVOID, LPDWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse32					( void ) = 0 ;				// FreePrivateData( REFGUID ) = 0 ;
		virtual HRESULT __stdcall NonUse33					( void ) = 0 ;				// GetUniquenessValue( LPDWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse34					( void ) = 0 ;				// ChangeUniquenessValue( void ) = 0 ;
	} ;

	class D_IDirectDrawSurface7 : public IUnknown
	{
	public :
		virtual HRESULT __stdcall AddAttachedSurface		( D_IDirectDrawSurface7 * ) = 0 ;
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// AddOverlayDirtyRect( LPRECT ) = 0 ;
		virtual HRESULT __stdcall Blt						( LPRECT, D_IDirectDrawSurface7 *, LPRECT, DWORD, D_DDBLTFX * ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// BltBatch( LPDDBLTBATCH, DWORD, DWORD	) = 0 ;
		virtual HRESULT __stdcall BltFast					( DWORD, DWORD, D_IDirectDrawSurface7 *, LPRECT, DWORD ) = 0 ;
		virtual HRESULT __stdcall DeleteAttachedSurface		( DWORD, D_IDirectDrawSurface7 * ) = 0 ;
		virtual HRESULT __stdcall EnumAttachedSurfaces		( LPVOID, LPD_DDENUMSURFACESCALLBACK7 ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// EnumOverlayZOrders( void ) = 0 ;		// EnumOverlayZOrders( DWORD,LPVOID,LPDDENUMSURFACESCALLBACK7 ) = 0 ;
		virtual HRESULT __stdcall Flip						( D_IDirectDrawSurface7 *, DWORD ) = 0 ;
		virtual HRESULT __stdcall GetAttachedSurface		( D_DDSCAPS2 *, D_IDirectDrawSurface7 ** ) = 0 ;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// GetBltStatus( DWORD ) = 0 ;
		virtual HRESULT __stdcall GetCaps					( D_DDSCAPS2 * ) = 0 ;
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// GetClipper( LPDIRECTDRAWCLIPPER FAR* ) = 0 ;
		virtual HRESULT __stdcall GetColorKey				( DWORD, D_DDCOLORKEY * ) = 0 ;
		virtual HRESULT __stdcall GetDC						( HDC * ) = 0 ;
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// GetFlipStatus( DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse06					( void ) = 0 ;				// GetOverlayPosition( LPLONG, LPLONG	) = 0 ;
		virtual HRESULT __stdcall NonUse07					( void ) = 0 ;				// GetPalette( LPDIRECTDRAWPALETTE FAR* ) = 0 ;
		virtual HRESULT __stdcall NonUse08					( void ) = 0 ;				// GetPixelFormat( LPDDPIXELFORMAT ) = 0 ;
		virtual HRESULT __stdcall GetSurfaceDesc			( D_DDSURFACEDESC2 * ) = 0 ;
		virtual HRESULT __stdcall NonUse09					( void ) = 0 ;				// Initialize( LPDIRECTDRAW, LPDDSURFACEDESC2 ) = 0 ;
		virtual HRESULT __stdcall IsLost					( void ) = 0 ;
		virtual HRESULT __stdcall Lock						( LPRECT, D_DDSURFACEDESC2 *, DWORD, HANDLE ) = 0 ;
		virtual HRESULT __stdcall ReleaseDC					( HDC ) = 0 ;
		virtual HRESULT __stdcall Restore					( void	) = 0 ;
		virtual HRESULT __stdcall SetClipper				( class D_IDirectDrawClipper * ) = 0 ;
		virtual HRESULT __stdcall SetColorKey				( DWORD, D_DDCOLORKEY * ) = 0 ;
		virtual HRESULT __stdcall NonUse10					( void ) = 0 ;				// SetOverlayPosition( LONG, LONG	) = 0 ;
		virtual HRESULT __stdcall SetPalette				( class D_IDirectDrawPalette * ) = 0 ;
		virtual HRESULT __stdcall Unlock					( LPRECT ) = 0 ;
		virtual HRESULT __stdcall UpdateOverlay				( LPRECT, D_IDirectDrawSurface7 *, LPRECT, DWORD, D_DDOVERLAYFX * ) = 0 ;
		virtual HRESULT __stdcall NonUse11					( void ) = 0 ;				// UpdateOverlayDisplay( DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse12					( void ) = 0 ;				// UpdateOverlayZOrder( DWORD, D_IDirectDrawSurface7 * ) = 0 ;

		virtual HRESULT __stdcall NonUse13					( void ) = 0 ;				// GetDDInterface( LPVOID FAR * ) = 0 ;
		virtual HRESULT __stdcall PageLock					( DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse15					( void ) = 0 ;				// PageUnlock( DWORD ) = 0 ;

		virtual HRESULT __stdcall NonUse16					( void ) = 0 ;				// SetSurfaceDesc( LPDDSURFACEDESC2, DWORD ) = 0 ;

		virtual HRESULT __stdcall NonUse17					( void ) = 0 ;				// SetPrivateData( REFGUID, LPVOID, DWORD, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse18					( void ) = 0 ;				// GetPrivateData( REFGUID, LPVOID, LPDWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse19					( void ) = 0 ;				// FreePrivateData( REFGUID ) = 0 ;
		virtual HRESULT __stdcall NonUse20					( void ) = 0 ;				// GetUniquenessValue( LPDWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse21					( void ) = 0 ;				// ChangeUniquenessValue( void ) = 0 ;

		virtual HRESULT __stdcall NonUse22					( void ) = 0 ;				// SetPriority( DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse23					( void ) = 0 ;				// GetPriority( LPDWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse24					( void ) = 0 ;				// SetLOD( DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse25					( void ) = 0 ;				// GetLOD( LPDWORD ) = 0 ;
	} ;

	class D_IDirectDrawClipper : public IUnknown
	{
	public :
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// GetClipList( LPRECT, LPRGNDATA, LPDWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// GetHWnd( HWND FAR * ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// Initialize( LPDIRECTDRAW, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// IsClipListChanged( BOOL FAR * ) = 0 ;
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// SetClipList( LPRGNDATA,DWORD ) = 0 ;
		virtual HRESULT __stdcall SetHWnd					( DWORD, HWND ) = 0 ;
	} ;

	class D_IDirectDrawPalette : public IUnknown 
	{
	public :
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// GetCaps( LPDWORD ) = 0 ;
		virtual HRESULT __stdcall GetEntries				( DWORD, DWORD, DWORD, LPPALETTEENTRY ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// Initialize( LPDIRECTDRAW, DWORD, LPPALETTEENTRY ) = 0 ;
		virtual HRESULT __stdcall SetEntries				( DWORD, DWORD, DWORD, LPPALETTEENTRY ) = 0 ;
	} ;

	// ÇcÇâÇíÇÖÇÉÇîÇRÇc -----------------------------------------------------------

	#define D_D3D_OK								(D_DD_OK)

	#define D_D3DENUMRET_CANCEL						D_DDENUMRET_CANCEL
	#define D_D3DENUMRET_OK							D_DDENUMRET_OK

	#define D_D3DPTEXTURECAPS_POW2					(0x00000002L)
	#define D_D3DPTEXTURECAPS_SQUAREONLY			(0x00000020L)

	#define D_D3DTA_DIFFUSE							(0x00000000)
	#define D_D3DTA_CURRENT							(0x00000001)
	#define D_D3DTA_TEXTURE							(0x00000002)
	#define D_D3DTA_TFACTOR							(0x00000003)
	#define D_D3DTA_SPECULAR						(0x00000004)
	#define D_D3DTA_COMPLEMENT						(0x00000010)

	#define D_D3DFVF_XYZ							(0x002)
	#define D_D3DFVF_XYZRHW							(0x004)
	#define D_D3DFVF_NORMAL							(0x010)
	#define D_D3DFVF_DIFFUSE						(0x040)
	#define D_D3DFVF_SPECULAR						(0x080)
	#define D_D3DFVF_TEX1							(0x100)
	#define D_D3DFVF_TEX2							(0x200)
	#define D_D3DFVF_TEX3							(0x300)
	#define D_D3DFVF_TEX4							(0x400)
	#define D_D3DFVF_TEX5							(0x500)
	#define D_D3DFVF_TEX6							(0x600)
	#define D_D3DFVF_TEX7							(0x700)
	#define D_D3DFVF_TEX8							(0x800)
	#define D_D3DFVF_XYZB1							(0x006)
	#define D_D3DFVF_XYZB2							(0x008)
	#define D_D3DFVF_XYZB3							(0x00a)
	#define D_D3DFVF_XYZB4							(0x00c)
	#define D_D3DFVF_XYZB5							(0x00e)

	#define D_D3DVBCAPS_SYSTEMMEMORY				(0x00000800l)
	#define D_D3DVBCAPS_WRITEONLY					(0x00010000l)
	#define D_D3DVBCAPS_OPTIMIZED					(0x80000000l)
	#define D_D3DVBCAPS_DONOTCLIP					(0x00000001l)

	#define D_RGBA_MAKE(r, g, b, a)					((D_D3DCOLOR) (((a) << 24) | ((r) << 16) | ((g) << 8) | (b)))

	typedef enum tagD_D3DVERTEXBLENDFLAGS
	{
		D3DVBLEND_DISABLE							= 0,
		D3DVBLEND_1WEIGHT							= 1,
		D3DVBLEND_2WEIGHTS							= 2,
		D3DVBLEND_3WEIGHTS							= 3,
	} D_D3DVERTEXBLENDFLAGS;

	typedef enum tagD_D3DCULL
	{
		D_D3DCULL_NONE								= 1,
		D_D3DCULL_CW								= 2,
		D_D3DCULL_CCW								= 3,
		D_D3DCULL_FORCE_DWORD						= 0x7fffffff,
	} D_D3DCULL;

	typedef enum tagD_D3DZBUFFERTYPE
	{
		D_D3DZB_FALSE								= 0,
		D_D3DZB_TRUE								= 1,
		D_D3DZB_USEW								= 2,
		D_D3DZB_FORCE_DWORD							= 0x7fffffff,
	} D_D3DZBUFFERTYPE;

	typedef enum tagD_D3DBLEND
	{
		D_D3DBLEND_ZERO								= 1,
		D_D3DBLEND_ONE								= 2,
		D_D3DBLEND_SRCCOLOR							= 3,
		D_D3DBLEND_INVSRCCOLOR						= 4,
		D_D3DBLEND_SRCALPHA							= 5,
		D_D3DBLEND_INVSRCALPHA						= 6,
		D_D3DBLEND_DESTALPHA						= 7,
		D_D3DBLEND_INVDESTALPHA						= 8,
		D_D3DBLEND_DESTCOLOR						= 9,
		D_D3DBLEND_INVDESTCOLOR						= 10,
		D_D3DBLEND_SRCALPHASAT						= 11,
		D_D3DBLEND_BOTHSRCALPHA						= 12,
		D_D3DBLEND_BOTHINVSRCALPHA					= 13,
		D_D3DBLEND_FORCE_DWORD						= 0x7fffffff,
	} D_D3DBLEND;

	typedef enum tagD_D3DTEXTUREOP
	{
		D_D3DTOP_DISABLE							= 1,
		D_D3DTOP_SELECTARG1							= 2,
		D_D3DTOP_SELECTARG2							= 3,

		D_D3DTOP_MODULATE							= 4,
		D_D3DTOP_MODULATE2X							= 5,
		D_D3DTOP_MODULATE4X							= 6,

		D_D3DTOP_ADD								= 7,
		D_D3DTOP_ADDSIGNED							= 8,
		D_D3DTOP_ADDSIGNED2X						= 9,
		D_D3DTOP_SUBTRACT							= 10,
		D_D3DTOP_ADDSMOOTH							= 11,

		D_D3DTOP_BLENDDIFFUSEALPHA					= 12,
		D_D3DTOP_BLENDTEXTUREALPHA					= 13,
		D_D3DTOP_BLENDFACTORALPHA					= 14,

		D_D3DTOP_BLENDTEXTUREALPHAPM				= 15,
		D_D3DTOP_BLENDCURRENTALPHA					= 16,

		D_D3DTOP_PREMODULATE						= 17,
		D_D3DTOP_MODULATEALPHA_ADDCOLOR				= 18,
		D_D3DTOP_MODULATECOLOR_ADDALPHA				= 19,
		D_D3DTOP_MODULATEINVALPHA_ADDCOLOR			= 20,
		D_D3DTOP_MODULATEINVCOLOR_ADDALPHA			= 21,

		D_D3DTOP_BUMPENVMAP							= 22,
		D_D3DTOP_BUMPENVMAPLUMINANCE				= 23,
		D_D3DTOP_DOTPRODUCT3						= 24,

		D_D3DTOP_FORCE_DWORD						= 0x7fffffff,
	} D_D3DTEXTUREOP;

	typedef enum tagD_D3DSHADEMODE
	{
		D_D3DSHADE_FLAT								= 1,
		D_D3DSHADE_GOURAUD							= 2,
		D_D3DSHADE_PHONG							= 3,
		D_D3DSHADE_FORCE_DWORD						= 0x7fffffff,
	} D_D3DSHADEMODE;

	typedef enum tagD_D3DTEXTUREMAGFILTER
	{
		D_D3DTFG_POINT								= 1,
		D_D3DTFG_LINEAR								= 2,
		D_D3DTFG_FLATCUBIC							= 3,
		D_D3DTFG_GAUSSIANCUBIC						= 4,
		D_D3DTFG_ANISOTROPIC						= 5,
		D_D3DTFG_FORCE_DWORD						= 0x7fffffff,
	} D_D3DTEXTUREMAGFILTER;

	typedef enum tagD_D3DTEXTUREMINFILTER
	{
		D_D3DTFN_POINT								= 1,
		D_D3DTFN_LINEAR								= 2,
		D_D3DTFN_ANISOTROPIC						= 3,
		D_D3DTFN_FORCE_DWORD						= 0x7fffffff,
	} D_D3DTEXTUREMINFILTER;

	typedef enum tagD_D3DTEXTUREADDRESS
	{
		D_D3DTADDRESS_WRAP							= 1,
		D_D3DTADDRESS_MIRROR						= 2,
		D_D3DTADDRESS_CLAMP							= 3,
		D_D3DTADDRESS_BORDER						= 4,
		D_D3DTADDRESS_FORCE_DWORD					= 0x7fffffff,
	} D_D3DTEXTUREADDRESS;

	typedef enum tagD_D3DPRIMITIVETYPE
	{
		D_D3DPT_POINTLIST							= 1,
		D_D3DPT_LINELIST							= 2,
		D_D3DPT_LINESTRIP							= 3,
		D_D3DPT_TRIANGLELIST						= 4,
		D_D3DPT_TRIANGLESTRIP						= 5,
		D_D3DPT_TRIANGLEFAN							= 6,
		D_D3DPT_FORCE_DWORD							= 0x7fffffff,
	} D_D3DPRIMITIVETYPE;

	typedef enum tagD_D3DCMPFUNC
	{
		D_D3DCMP_NEVER								= 1, 
		D_D3DCMP_LESS								= 2, 
		D_D3DCMP_EQUAL								= 3, 
		D_D3DCMP_LESSEQUAL							= 4, 
		D_D3DCMP_GREATER							= 5, 
		D_D3DCMP_NOTEQUAL							= 6, 
		D_D3DCMP_GREATEREQUAL						= 7, 
		D_D3DCMP_ALWAYS								= 8, 
		D_D3DCMP_FORCE_DWORD						= 0x7fffffff, 
	} D_D3DCMPFUNC ;
	
	typedef enum tagD_D3DRENDERSTATETYPE
	{
		D_D3DRENDERSTATE_ANTIALIAS					= 2,
		D_D3DRENDERSTATE_TEXTUREPERSPECTIVE			= 4,
		D_D3DRENDERSTATE_ZENABLE					= 7,
		D_D3DRENDERSTATE_FILLMODE					= 8,
		D_D3DRENDERSTATE_SHADEMODE					= 9,
		D_D3DRENDERSTATE_LINEPATTERN				= 10,
		D_D3DRENDERSTATE_ZWRITEENABLE				= 14,
		D_D3DRENDERSTATE_ALPHATESTENABLE			= 15,
		D_D3DRENDERSTATE_LASTPIXEL					= 16,
		D_D3DRENDERSTATE_SRCBLEND					= 19,
		D_D3DRENDERSTATE_DESTBLEND					= 20,
		D_D3DRENDERSTATE_CULLMODE					= 22,
		D_D3DRENDERSTATE_ZFUNC						= 23,
		D_D3DRENDERSTATE_ALPHAREF					= 24,
		D_D3DRENDERSTATE_ALPHAFUNC					= 25,
		D_D3DRENDERSTATE_DITHERENABLE				= 26,
		D_D3DRENDERSTATE_ALPHABLENDENABLE			= 27,
		D_D3DRENDERSTATE_FOGENABLE					= 28,
		D_D3DRENDERSTATE_SPECULARENABLE				= 29,
		D_D3DRENDERSTATE_ZVISIBLE					= 30,
		D_D3DRENDERSTATE_STIPPLEDALPHA				= 33,
		D_D3DRENDERSTATE_FOGCOLOR					= 34,
		D_D3DRENDERSTATE_FOGTABLEMODE				= 35,
		D_D3DRENDERSTATE_FOGSTART					= 36,
		D_D3DRENDERSTATE_FOGEND						= 37,
		D_D3DRENDERSTATE_FOGDENSITY					= 38,
		D_D3DRENDERSTATE_EDGEANTIALIAS				= 40,
		D_D3DRENDERSTATE_COLORKEYENABLE				= 41,
		D_D3DRENDERSTATE_ZBIAS						= 47,
		D_D3DRENDERSTATE_RANGEFOGENABLE				= 48,
		D_D3DRENDERSTATE_STENCILENABLE				= 52,
		D_D3DRENDERSTATE_STENCILFAIL				= 53,
		D_D3DRENDERSTATE_STENCILZFAIL				= 54,
		D_D3DRENDERSTATE_STENCILPASS				= 55,
		D_D3DRENDERSTATE_STENCILFUNC				= 56,
		D_D3DRENDERSTATE_STENCILREF					= 57,
		D_D3DRENDERSTATE_STENCILMASK				= 58,
		D_D3DRENDERSTATE_STENCILWRITEMASK			= 59,
		D_D3DRENDERSTATE_TEXTUREFACTOR				= 60,
		D_D3DRENDERSTATE_WRAP0						= 128,
		D_D3DRENDERSTATE_WRAP1						= 129,
		D_D3DRENDERSTATE_WRAP2						= 130,
		D_D3DRENDERSTATE_WRAP3						= 131,
		D_D3DRENDERSTATE_WRAP4						= 132,
		D_D3DRENDERSTATE_WRAP5						= 133,
		D_D3DRENDERSTATE_WRAP6						= 134,
		D_D3DRENDERSTATE_WRAP7						= 135,
		D_D3DRENDERSTATE_CLIPPING					= 136,
		D_D3DRENDERSTATE_LIGHTING					= 137,
		D_D3DRENDERSTATE_EXTENTS					= 138,
		D_D3DRENDERSTATE_AMBIENT					= 139,
		D_D3DRENDERSTATE_FOGVERTEXMODE				= 140,
		D_D3DRENDERSTATE_COLORVERTEX				= 141,
		D_D3DRENDERSTATE_LOCALVIEWER				= 142,
		D_D3DRENDERSTATE_NORMALIZENORMALS			= 143,
		D_D3DRENDERSTATE_COLORKEYBLENDENABLE		= 144,
		D_D3DRENDERSTATE_DIFFUSEMATERIALSOURCE		= 145,
		D_D3DRENDERSTATE_SPECULARMATERIALSOURCE		= 146,
		D_D3DRENDERSTATE_AMBIENTMATERIALSOURCE		= 147,
		D_D3DRENDERSTATE_EMISSIVEMATERIALSOURCE		= 148,
		D_D3DRENDERSTATE_VERTEXBLEND				= 151,
		D_D3DRENDERSTATE_CLIPPLANEENABLE			= 152,

		D_D3DRENDERSTATE_TEXTUREHANDLE				= 1,
		D_D3DRENDERSTATE_TEXTUREADDRESS				= 3,
		D_D3DRENDERSTATE_WRAPU						= 5,
		D_D3DRENDERSTATE_WRAPV						= 6,
		D_D3DRENDERSTATE_MONOENABLE					= 11,
		D_D3DRENDERSTATE_ROP2						= 12,
		D_D3DRENDERSTATE_PLANEMASK					= 13,
		D_D3DRENDERSTATE_TEXTUREMAG					= 17,
		D_D3DRENDERSTATE_TEXTUREMIN					= 18,
		D_D3DRENDERSTATE_TEXTUREMAPBLEND			= 21,
		D_D3DRENDERSTATE_SUBPIXEL					= 31,
		D_D3DRENDERSTATE_SUBPIXELX					= 32,
		D_D3DRENDERSTATE_STIPPLEENABLE				= 39,
		D_D3DRENDERSTATE_BORDERCOLOR				= 43,
		D_D3DRENDERSTATE_TEXTUREADDRESSU			= 44,
		D_D3DRENDERSTATE_TEXTUREADDRESSV			= 45,
		D_D3DRENDERSTATE_MIPMAPLODBIAS				= 46,
		D_D3DRENDERSTATE_ANISOTROPY					= 49,
		D_D3DRENDERSTATE_FLUSHBATCH					= 50,
		D_D3DRENDERSTATE_TRANSLUCENTSORTINDEPENDENT	= 51,
		D_D3DRENDERSTATE_STIPPLEPATTERN00			= 64,
		D_D3DRENDERSTATE_STIPPLEPATTERN01			= 65,
		D_D3DRENDERSTATE_STIPPLEPATTERN02			= 66,
		D_D3DRENDERSTATE_STIPPLEPATTERN03			= 67,
		D_D3DRENDERSTATE_STIPPLEPATTERN04			= 68,
		D_D3DRENDERSTATE_STIPPLEPATTERN05			= 69,
		D_D3DRENDERSTATE_STIPPLEPATTERN06			= 70,
		D_D3DRENDERSTATE_STIPPLEPATTERN07			= 71,
		D_D3DRENDERSTATE_STIPPLEPATTERN08			= 72,
		D_D3DRENDERSTATE_STIPPLEPATTERN09			= 73,
		D_D3DRENDERSTATE_STIPPLEPATTERN10			= 74,
		D_D3DRENDERSTATE_STIPPLEPATTERN11			= 75,
		D_D3DRENDERSTATE_STIPPLEPATTERN12			= 76,
		D_D3DRENDERSTATE_STIPPLEPATTERN13			= 77,
		D_D3DRENDERSTATE_STIPPLEPATTERN14			= 78,
		D_D3DRENDERSTATE_STIPPLEPATTERN15			= 79,
		D_D3DRENDERSTATE_STIPPLEPATTERN16			= 80,
		D_D3DRENDERSTATE_STIPPLEPATTERN17			= 81,
		D_D3DRENDERSTATE_STIPPLEPATTERN18			= 82,
		D_D3DRENDERSTATE_STIPPLEPATTERN19			= 83,
		D_D3DRENDERSTATE_STIPPLEPATTERN20			= 84,
		D_D3DRENDERSTATE_STIPPLEPATTERN21			= 85,
		D_D3DRENDERSTATE_STIPPLEPATTERN22			= 86,
		D_D3DRENDERSTATE_STIPPLEPATTERN23			= 87,
		D_D3DRENDERSTATE_STIPPLEPATTERN24			= 88,
		D_D3DRENDERSTATE_STIPPLEPATTERN25			= 89,
		D_D3DRENDERSTATE_STIPPLEPATTERN26			= 90,
		D_D3DRENDERSTATE_STIPPLEPATTERN27			= 91,
		D_D3DRENDERSTATE_STIPPLEPATTERN28			= 92,
		D_D3DRENDERSTATE_STIPPLEPATTERN29			= 93,
		D_D3DRENDERSTATE_STIPPLEPATTERN30			= 94,
		D_D3DRENDERSTATE_STIPPLEPATTERN31			= 95,

		D_D3DRENDERSTATE_FOGTABLESTART				= 36,
		D_D3DRENDERSTATE_FOGTABLEEND				= 37,
		D_D3DRENDERSTATE_FOGTABLEDENSITY			= 38,

		D_D3DRENDERSTATE_FORCE_DWORD				= 0x7fffffff,
	} D_D3DRENDERSTATETYPE;

	typedef enum tagD_D3DTEXTURESTAGESTATETYPE
	{
		D_D3DTSS_COLOROP							= 1,
		D_D3DTSS_COLORARG1							= 2,
		D_D3DTSS_COLORARG2							= 3,
		D_D3DTSS_ALPHAOP							= 4,
		D_D3DTSS_ALPHAARG1							= 5,
		D_D3DTSS_ALPHAARG2							= 6,
		D_D3DTSS_BUMPENVMAT00						= 7,
		D_D3DTSS_BUMPENVMAT01						= 8,
		D_D3DTSS_BUMPENVMAT10						= 9,
		D_D3DTSS_BUMPENVMAT11						= 10,
		D_D3DTSS_TEXCOORDINDEX						= 11,
		D_D3DTSS_ADDRESS							= 12,
		D_D3DTSS_ADDRESSU							= 13,
		D_D3DTSS_ADDRESSV							= 14,
		D_D3DTSS_BORDERCOLOR						= 15,
		D_D3DTSS_MAGFILTER							= 16,
		D_D3DTSS_MINFILTER							= 17,
		D_D3DTSS_MIPFILTER							= 18,
		D_D3DTSS_MIPMAPLODBIAS						= 19,
		D_D3DTSS_MAXMIPLEVEL						= 20,
		D_D3DTSS_MAXANISOTROPY						= 21,
		D_D3DTSS_BUMPENVLSCALE						= 22,
		D_D3DTSS_BUMPENVLOFFSET						= 23,
		D_D3DTSS_TEXTURETRANSFORMFLAGS				= 24,
		D_D3DTSS_FORCE_DWORD						= 0x7fffffff,
	} D_D3DTEXTURESTAGESTATETYPE ;

	typedef enum tagD_D3DTRANSFORMSTATETYPE
	{
		D_D3DTRANSFORMSTATE_WORLD					= 1,
		D_D3DTRANSFORMSTATE_VIEW					= 2,
		D_D3DTRANSFORMSTATE_PROJECTION				= 3,
		D_D3DTRANSFORMSTATE_WORLD1					= 4,
		D_D3DTRANSFORMSTATE_WORLD2					= 5,
		D_D3DTRANSFORMSTATE_WORLD3					= 6,
		D_D3DTRANSFORMSTATE_TEXTURE0				= 16,
		D_D3DTRANSFORMSTATE_TEXTURE1				= 17,
		D_D3DTRANSFORMSTATE_TEXTURE2				= 18,
		D_D3DTRANSFORMSTATE_TEXTURE3				= 19,
		D_D3DTRANSFORMSTATE_TEXTURE4				= 20,
		D_D3DTRANSFORMSTATE_TEXTURE5				= 21,
		D_D3DTRANSFORMSTATE_TEXTURE6				= 22,
		D_D3DTRANSFORMSTATE_TEXTURE7				= 23,
		D_D3DTRANSFORMSTATE_FORCE_DWORD				= 0x7fffffff,
	} D_D3DTRANSFORMSTATETYPE ;

	typedef enum tagD_D3DLIGHTTYPE
	{
		D_D3DLIGHT_POINT							= 1,
		D_D3DLIGHT_SPOT								= 2,
		D_D3DLIGHT_DIRECTIONAL						= 3,
		D_D3DLIGHT_PARALLELPOINT					= 4,
		D_D3DLIGHT_GLSPOT							= 5,
		D_D3DLIGHT_FORCE_DWORD						= 0x7fffffff,
	} D_D3DLIGHTTYPE ;

	typedef float									D_D3DVALUE ;
	typedef DWORD									D_D3DCOLOR ;

	typedef struct tagD_D3DVIEWPORT7
	{
		DWORD										dwX;
		DWORD										dwY;
		DWORD										dwWidth;
		DWORD										dwHeight;
		D_D3DVALUE									dvMinZ;
		D_D3DVALUE									dvMaxZ;
	} D_D3DVIEWPORT7 ;

	typedef struct tagD_D3DPRIMCAPS
	{
		DWORD										dwSize;
		DWORD										dwMiscCaps;
		DWORD										dwRasterCaps;
		DWORD										dwZCmpCaps;
		DWORD										dwSrcBlendCaps;
		DWORD										dwDestBlendCaps;
		DWORD										dwAlphaCmpCaps;
		DWORD										dwShadeCaps;
		DWORD										dwTextureCaps;
		DWORD										dwTextureFilterCaps;
		DWORD										dwTextureBlendCaps;
		DWORD										dwTextureAddressCaps;
		DWORD										dwStippleWidth;
		DWORD										dwStippleHeight;
	} D_D3DPRIMCAPS ;

	typedef struct tagD_D3DDEVICEDESC7
	{
		DWORD										dwDevCaps;
		D_D3DPRIMCAPS								dpcLineCaps;
		D_D3DPRIMCAPS								dpcTriCaps;
		DWORD										dwDeviceRenderBitDepth;
		DWORD										dwDeviceZBufferBitDepth;

		DWORD										dwMinTextureWidth, dwMinTextureHeight;
		DWORD										dwMaxTextureWidth, dwMaxTextureHeight;

		DWORD										dwMaxTextureRepeat;
		DWORD										dwMaxTextureAspectRatio;
		DWORD										dwMaxAnisotropy;

		D_D3DVALUE									dvGuardBandLeft;
		D_D3DVALUE									dvGuardBandTop;
		D_D3DVALUE									dvGuardBandRight;
		D_D3DVALUE									dvGuardBandBottom;

		D_D3DVALUE									dvExtentsAdjust;
		DWORD										dwStencilCaps;

		DWORD										dwFVFCaps;
		DWORD										dwTextureOpCaps;
		WORD										wMaxTextureBlendStages;
		WORD										wMaxSimultaneousTextures;

		DWORD										dwMaxActiveLights;
		D_D3DVALUE									dvMaxVertexW;
		GUID										deviceGUID;

		WORD										wMaxUserClipPlanes;
		WORD										wMaxVertexBlendMatrices;

		DWORD										dwVertexProcessingCaps;

		DWORD										dwReserved1;
		DWORD										dwReserved2;
		DWORD										dwReserved3;
		DWORD										dwReserved4;
	} D_D3DDEVICEDESC7 ;

	typedef struct tagD_D3DRECT
	{
		union
		{
			LONG 									x1;
			LONG 									lX1;
		} ;
		union
		{
			LONG 									y1;
			LONG 									lY1;
		} ;
		union
		{
			LONG 									x2;
			LONG 									lX2;
		} ;
		union
		{
			LONG 									y2;
			LONG 									lY2;
		} ;
	} D_D3DRECT ;

	typedef struct tagD_D3DMATRIX
	{
		D_D3DVALUE  								m[4][4];
	} D_D3DMATRIX ;

	typedef struct tagD_D3DCOLORVALUE
	{
		union
		{
			D_D3DVALUE  							r;
			D_D3DVALUE  							dvR;
		} ;
		union
		{
			D_D3DVALUE  							g;
			D_D3DVALUE  							dvG;
		} ;
		union
		{
			D_D3DVALUE  							b;
			D_D3DVALUE  							dvB;
		} ;
		union
		{
			D_D3DVALUE  							a;
			D_D3DVALUE  							dvA;
		} ;
	} D_D3DCOLORVALUE;

	typedef struct tagD_D3DVECTOR
	{
		union
		{
			D_D3DVALUE  							x;
			D_D3DVALUE  							dvX;
		} ;
		union
		{
			D_D3DVALUE  							y;
			D_D3DVALUE  							dvY;
		} ;
		union
		{
			D_D3DVALUE  							z;
			D_D3DVALUE  							dvZ;
		} ;
	} D_D3DVECTOR ;

	typedef struct tagD_D3DMATERIAL7
	{
		union
		{
			D_D3DCOLORVALUE							diffuse;
			D_D3DCOLORVALUE							dcvDiffuse;
		} ;
		union
		{
			D_D3DCOLORVALUE							ambient;
			D_D3DCOLORVALUE							dcvAmbient;
		} ;
		union
		{
			D_D3DCOLORVALUE							specular;
			D_D3DCOLORVALUE							dcvSpecular;
		} ;
		union
		{
			D_D3DCOLORVALUE							emissive;
			D_D3DCOLORVALUE							dcvEmissive;
		} ;
		union
		{
			D_D3DVALUE								power;
			D_D3DVALUE								dvPower;
		} ;
	} D_D3DMATERIAL7 ;

	typedef struct tagD_D3DLIGHT7
	{
		D_D3DLIGHTTYPE								dltType;
		D_D3DCOLORVALUE								dcvDiffuse;
		D_D3DCOLORVALUE								dcvSpecular;
		D_D3DCOLORVALUE								dcvAmbient;
		D_D3DVECTOR									dvPosition;
		D_D3DVECTOR									dvDirection;
		D_D3DVALUE									dvRange;
		D_D3DVALUE									dvFalloff;
		D_D3DVALUE									dvAttenuation0;
		D_D3DVALUE									dvAttenuation1;
		D_D3DVALUE									dvAttenuation2;
		D_D3DVALUE									dvTheta;
		D_D3DVALUE									dvPhi;
	} D_D3DLIGHT7 ;

	typedef struct tagD_D3DVERTEXBUFFERDESC
	{
		DWORD										dwSize;
		DWORD										dwCaps;
		DWORD										dwFVF;
		DWORD										dwNumVertices;
	} D_D3DVERTEXBUFFERDESC ;

	typedef HRESULT ( CALLBACK * LPD_D3DENUMDEVICESCALLBACK7 )		( LPSTR lpDeviceDescription, LPSTR lpDeviceName, class D_IDirect3DDevice7 *, LPVOID);
	typedef HRESULT ( CALLBACK * LPD_D3DENUMPIXELFORMATSCALLBACK )	( D_DDPIXELFORMAT *lpDDPixFmt, LPVOID lpContext);
	typedef HRESULT ( CALLBACK * LPD_D3DENUMPIXELFORMATSCALLBACK )	( D_DDPIXELFORMAT *lpDDPixFmt, LPVOID lpContext);

	class D_IDirect3D7 : public IUnknown
	{
	public :
		virtual HRESULT __stdcall EnumDevices				( LPD_D3DENUMDEVICESCALLBACK7, LPVOID ) = 0 ;
		virtual HRESULT __stdcall CreateDevice				( REFCLSID, D_IDirectDrawSurface7 *, class D_IDirect3DDevice7 ** ) = 0 ;
		virtual HRESULT __stdcall CreateVertexBuffer		( D_D3DVERTEXBUFFERDESC *, class D_IDirect3DVertexBuffer7 **, DWORD ) = 0 ;
		virtual HRESULT __stdcall EnumZBufferFormats		( REFCLSID, LPD_D3DENUMPIXELFORMATSCALLBACK, LPVOID ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// EvictManagedTextures( void ) = 0 ;
	} ;

	class D_IDirect3DDevice7 : public IUnknown
	{
	public :
		virtual HRESULT __stdcall GetCaps					( D_D3DDEVICEDESC7 * ) = 0 ;
		virtual HRESULT __stdcall EnumTextureFormats		( LPD_D3DENUMPIXELFORMATSCALLBACK, LPVOID ) = 0 ;
		virtual HRESULT __stdcall BeginScene				( void ) = 0 ;
		virtual HRESULT __stdcall EndScene					( void ) = 0 ;
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// GetDirect3D( LPDIRECT3D7* ) = 0 ;
		virtual HRESULT __stdcall SetRenderTarget			( D_IDirectDrawSurface7 *,DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// GetRenderTarget( D_IDirectDrawSurface7 * * ) = 0 ;
		virtual HRESULT __stdcall Clear						( DWORD, D_D3DRECT *, DWORD, D_D3DCOLOR, D_D3DVALUE, DWORD ) = 0 ;
		virtual HRESULT __stdcall SetTransform				( D_D3DTRANSFORMSTATETYPE, D_D3DMATRIX * ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// GetTransform( D3DTRANSFORMSTATETYPE,LPD3DMATRIX ) = 0 ;
		virtual HRESULT __stdcall SetViewport				( D_D3DVIEWPORT7 * ) = 0 ;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// MultiplyTransform( D3DTRANSFORMSTATETYPE,LPD3DMATRIX ) = 0 ;
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// GetViewport( LPD3DVIEWPORT7 ) = 0 ;
		virtual HRESULT __stdcall SetMaterial				( D_D3DMATERIAL7 * ) = 0 ;
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// GetMaterial( LPD3DMATERIAL7 ) = 0 ;
		virtual HRESULT __stdcall SetLight					( DWORD, D_D3DLIGHT7 * ) = 0 ;
		virtual HRESULT __stdcall NonUse06					( void ) = 0 ;				// GetLight( DWORD,LPD3DLIGHT7 ) = 0 ;
		virtual HRESULT __stdcall SetRenderState			( D_D3DRENDERSTATETYPE, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse07					( void ) = 0 ;				// GetRenderState( D3DRENDERSTATETYPE,LPDWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse08					( void ) = 0 ;				// BeginStateBlock( void	) = 0 ;
		virtual HRESULT __stdcall NonUse09					( void ) = 0 ;				// EndStateBlock( LPDWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse10					( void ) = 0 ;				// PreLoad( D_IDirectDrawSurface7 * ) = 0 ;
		virtual HRESULT __stdcall DrawPrimitive				( D_D3DPRIMITIVETYPE, DWORD, LPVOID, DWORD, DWORD ) = 0 ;
		virtual HRESULT __stdcall DrawIndexedPrimitive		( D_D3DPRIMITIVETYPE, DWORD, LPVOID, DWORD, LPWORD, DWORD, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse11					( void ) = 0 ;				// SetClipStatus( void ) = 0 ;					// SetClipStatus( LPD3DCLIPSTATUS ) = 0 ;
		virtual HRESULT __stdcall NonUse12					( void ) = 0 ;				// GetClipStatus( LPD3DCLIPSTATUS ) = 0 ;
		virtual HRESULT __stdcall NonUse13					( void ) = 0 ;				// DrawPrimitiveStrided( D3DPRIMITIVETYPE,DWORD,LPD3DDRAWPRIMITIVESTRIDEDDATA,DWORD,DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse14					( void ) = 0 ;				// DrawIndexedPrimitiveStrided( D3DPRIMITIVETYPE,DWORD,LPD3DDRAWPRIMITIVESTRIDEDDATA,DWORD,LPWORD,DWORD,DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse15					( void ) = 0 ;				// DrawPrimitiveVB( D3DPRIMITIVETYPE,LPDIRECT3DVERTEXBUFFER7,DWORD,DWORD,DWORD ) = 0 ;
		virtual HRESULT __stdcall DrawIndexedPrimitiveVB	( D_D3DPRIMITIVETYPE, D_IDirect3DVertexBuffer7 *, DWORD, DWORD, LPWORD, DWORD, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse17					( void ) = 0 ;				// ComputeSphereVisibility( LPD3DVECTOR,LPD3DVALUE,DWORD,DWORD,LPDWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse18					( void ) = 0 ;				// GetTexture( DWORD,D_IDirectDrawSurface7 * * ) = 0 ;
		virtual HRESULT __stdcall SetTexture				( DWORD, D_IDirectDrawSurface7 * ) = 0 ;
		virtual HRESULT __stdcall NonUse19					( void ) = 0 ;				// GetTextureStageState( DWORD,D3DTEXTURESTAGESTATETYPE,LPDWORD ) = 0 ;
		virtual HRESULT __stdcall SetTextureStageState		( DWORD, D_D3DTEXTURESTAGESTATETYPE, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse20					( void ) = 0 ;				// ValidateDevice( LPDWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse21					( void ) = 0 ;				// ApplyStateBlock( DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse22					( void ) = 0 ;				// CaptureStateBlock( DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse23					( void ) = 0 ;				// DeleteStateBlock( DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse24					( void ) = 0 ;				// CreateStateBlock( D3DSTATEBLOCKTYPE,LPDWORD ) = 0 ;
		virtual HRESULT __stdcall Load						( D_IDirectDrawSurface7 *, LPPOINT, D_IDirectDrawSurface7 *, LPRECT, DWORD ) = 0 ;
		virtual HRESULT __stdcall LightEnable				( DWORD, BOOL ) = 0 ;
		virtual HRESULT __stdcall NonUse25					( void ) = 0 ;				// GetLightEnable( DWORD,BOOL* ) = 0 ;
		virtual HRESULT __stdcall NonUse26					( void ) = 0 ;				// SetClipPlane( DWORD,D3DVALUE* ) = 0 ;
		virtual HRESULT __stdcall NonUse27					( void ) = 0 ;				// GetClipPlane( DWORD,D3DVALUE* ) = 0 ;
		virtual HRESULT __stdcall NonUse28					( void ) = 0 ;				// GetInfo( DWORD,LPVOID,DWORD ) = 0 ;
	} ;

	class D_IDirect3DVertexBuffer7 : public IUnknown
	{
	public :
		virtual HRESULT __stdcall Lock						( DWORD, LPVOID * , LPDWORD ) = 0 ;
		virtual HRESULT __stdcall Unlock					( void ) = 0 ;
		virtual HRESULT __stdcall ProcessVertices			( DWORD, DWORD, DWORD, D_IDirect3DVertexBuffer7 *, DWORD, D_IDirect3DDevice7 *, DWORD ) = 0 ;
		virtual HRESULT __stdcall GetVertexBufferDesc		( D_D3DVERTEXBUFFERDESC * ) = 0 ;
		virtual HRESULT __stdcall Optimize					( D_IDirect3DDevice7 *, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse1					( void ) = 0 ;				// ProcessVerticesStrided	( DWORD, DWORD, DWORD, LPD3DDRAWPRIMITIVESTRIDEDDATA, DWORD, LPDIRECT3DDEVICE7, DWORD ) = 0 ;
	};

	// ÇcÇâÇíÇÖÇÉÇîÇhÇéÇêÇïÇî -----------------------------------------------------

	#define D_DI_OK									(S_OK)
	#define D_DIDEVTYPE_KEYBOARD					(3)
	#define D_DIDEVTYPE_JOYSTICK					(4)
	#define D_DIEDFL_ATTACHEDONLY					(0x00000001)

	#define D_DIENUM_STOP							(0)
	#define D_DIENUM_CONTINUE						(1)

	#define D_DIPROP_BUFFERSIZE						(*(const GUID *)(1))
	#define D_DIPROP_RANGE							(*(const GUID *)(4))
	#define D_DIPROP_DEADZONE						(*(const GUID *)(5))

	#define D_DI_POLLEDDEVICE						((HRESULT)0x00000002L)

	#define D_DISCL_EXCLUSIVE						(0x00000001)
	#define D_DISCL_NONEXCLUSIVE					(0x00000002)
	#define D_DISCL_FOREGROUND						(0x00000004)
	#define D_DISCL_BACKGROUND						(0x00000008)

	#define D_DIJOFS_X								FIELD_OFFSET(D_DIJOYSTATE, lX)
	#define D_DIJOFS_Y								FIELD_OFFSET(D_DIJOYSTATE, lY)
	#define D_DIJOFS_Z								FIELD_OFFSET(D_DIJOYSTATE, lZ)
	#define D_DIJOFS_RX								FIELD_OFFSET(D_DIJOYSTATE, lRx)
	#define D_DIJOFS_RY								FIELD_OFFSET(D_DIJOYSTATE, lRy)
	#define D_DIJOFS_RZ								FIELD_OFFSET(D_DIJOYSTATE, lRz)

	#define D_DIPH_DEVICE							(0)
	#define D_DIPH_BYOFFSET							(1)
	#define D_DIDFT_ENUMCOLLECTION(n)				((WORD)(n) << 8)

	#define D_DIK_ESCAPE							(0x01)
	#define D_DIK_1									(0x02)
	#define D_DIK_2									(0x03)
	#define D_DIK_3									(0x04)
	#define D_DIK_4									(0x05)
	#define D_DIK_5									(0x06)
	#define D_DIK_6									(0x07)
	#define D_DIK_7									(0x08)
	#define D_DIK_8									(0x09)
	#define D_DIK_9									(0x0A)
	#define D_DIK_0									(0x0B)
	#define D_DIK_MINUS								(0x0C)
	#define D_DIK_EQUALS							(0x0D)
	#define D_DIK_BACK								(0x0E)
	#define D_DIK_TAB								(0x0F)
	#define D_DIK_Q									(0x10)
	#define D_DIK_W									(0x11)
	#define D_DIK_E									(0x12)
	#define D_DIK_R									(0x13)
	#define D_DIK_T									(0x14)
	#define D_DIK_Y									(0x15)
	#define D_DIK_U									(0x16)
	#define D_DIK_I									(0x17)
	#define D_DIK_O									(0x18)
	#define D_DIK_P									(0x19)
	#define D_DIK_LBRACKET							(0x1A)
	#define D_DIK_RBRACKET							(0x1B)
	#define D_DIK_RETURN							(0x1C)
	#define D_DIK_LCONTROL							(0x1D)
	#define D_DIK_A									(0x1E)
	#define D_DIK_S									(0x1F)
	#define D_DIK_D									(0x20)
	#define D_DIK_F									(0x21)
	#define D_DIK_G									(0x22)
	#define D_DIK_H									(0x23)
	#define D_DIK_J									(0x24)
	#define D_DIK_K									(0x25)
	#define D_DIK_L									(0x26)
	#define D_DIK_SEMICOLON							(0x27)
	#define D_DIK_APOSTROPHE						(0x28)
	#define D_DIK_GRAVE								(0x29)
	#define D_DIK_LSHIFT							(0x2A)
	#define D_DIK_BACKSLASH							(0x2B)
	#define D_DIK_Z									(0x2C)
	#define D_DIK_X									(0x2D)
	#define D_DIK_C									(0x2E)
	#define D_DIK_V									(0x2F)
	#define D_DIK_B									(0x30)
	#define D_DIK_N									(0x31)
	#define D_DIK_M									(0x32)
	#define D_DIK_COMMA								(0x33)
	#define D_DIK_PERIOD							(0x34)
	#define D_DIK_SLASH								(0x35)
	#define D_DIK_RSHIFT							(0x36)
	#define D_DIK_MULTIPLY							(0x37)
	#define D_DIK_LMENU								(0x38)
	#define D_DIK_SPACE								(0x39)
	#define D_DIK_CAPITAL							(0x3A)
	#define D_DIK_F1								(0x3B)
	#define D_DIK_F2								(0x3C)
	#define D_DIK_F3								(0x3D)
	#define D_DIK_F4								(0x3E)
	#define D_DIK_F5								(0x3F)
	#define D_DIK_F6								(0x40)
	#define D_DIK_F7								(0x41)
	#define D_DIK_F8								(0x42)
	#define D_DIK_F9								(0x43)
	#define D_DIK_F10								(0x44)
	#define D_DIK_NUMLOCK							(0x45)
	#define D_DIK_SCROLL							(0x46)
	#define D_DIK_NUMPAD7							(0x47)
	#define D_DIK_NUMPAD8							(0x48)
	#define D_DIK_NUMPAD9							(0x49)
	#define D_DIK_SUBTRACT							(0x4A)
	#define D_DIK_NUMPAD4							(0x4B)
	#define D_DIK_NUMPAD5							(0x4C)
	#define D_DIK_NUMPAD6							(0x4D)
	#define D_DIK_ADD								(0x4E)
	#define D_DIK_NUMPAD1							(0x4F)
	#define D_DIK_NUMPAD2							(0x50)
	#define D_DIK_NUMPAD3							(0x51)
	#define D_DIK_NUMPAD0							(0x52)
	#define D_DIK_DECIMAL							(0x53)
	#define D_DIK_OEM_102							(0x56)
	#define D_DIK_F11								(0x57)
	#define D_DIK_F12								(0x58)
	#define D_DIK_F13								(0x64)
	#define D_DIK_F14								(0x65)
	#define D_DIK_F15								(0x66)
	#define D_DIK_KANA								(0x70)
	#define D_DIK_ABNT_C1							(0x73)
	#define D_DIK_CONVERT							(0x79)
	#define D_DIK_NOCONVERT							(0x7B)
	#define D_DIK_YEN								(0x7D)
	#define D_DIK_ABNT_C2							(0x7E)
	#define D_DIK_NUMPADEQUALS						(0x8D)
	#define D_DIK_PREVTRACK							(0x90)
	#define D_DIK_AT								(0x91)
	#define D_DIK_COLON								(0x92)
	#define D_DIK_UNDERLINE							(0x93)
	#define D_DIK_KANJI								(0x94)
	#define D_DIK_STOP								(0x95)
	#define D_DIK_AX								(0x96)
	#define D_DIK_UNLABELED							(0x97)
	#define D_DIK_NEXTTRACK							(0x99)
	#define D_DIK_NUMPADENTER						(0x9C)
	#define D_DIK_RCONTROL							(0x9D)
	#define D_DIK_MUTE								(0xA0)
	#define D_DIK_CALCULATOR						(0xA1)
	#define D_DIK_PLAYPAUSE							(0xA2)
	#define D_DIK_MEDIASTOP							(0xA4)
	#define D_DIK_VOLUMEDOWN						(0xAE)
	#define D_DIK_VOLUMEUP							(0xB0)
	#define D_DIK_WEBHOME							(0xB2)
	#define D_DIK_NUMPADCOMMA						(0xB3)
	#define D_DIK_DIVIDE							(0xB5)
	#define D_DIK_SYSRQ								(0xB7)
	#define D_DIK_RMENU								(0xB8)
	#define D_DIK_PAUSE								(0xC5)
	#define D_DIK_HOME								(0xC7)
	#define D_DIK_UP								(0xC8)
	#define D_DIK_PRIOR								(0xC9)
	#define D_DIK_LEFT								(0xCB)
	#define D_DIK_RIGHT								(0xCD)
	#define D_DIK_END								(0xCF)
	#define D_DIK_DOWN								(0xD0)
	#define D_DIK_NEXT								(0xD1)
	#define D_DIK_INSERT							(0xD2)
	#define D_DIK_DELETE							(0xD3)
	#define D_DIK_LWIN								(0xDB)
	#define D_DIK_RWIN								(0xDC)
	#define D_DIK_APPS								(0xDD)
	#define D_DIK_POWER								(0xDE)
	#define D_DIK_SLEEP								(0xDF)
	#define D_DIK_WAKE								(0xE3)
	#define D_DIK_WEBSEARCH							(0xE5)
	#define D_DIK_WEBFAVORITES						(0xE6)
	#define D_DIK_WEBREFRESH						(0xE7)
	#define D_DIK_WEBSTOP							(0xE8)
	#define D_DIK_WEBFORWARD						(0xE9)
	#define D_DIK_WEBBACK							(0xEA)
	#define D_DIK_MYCOMPUTER						(0xEB)
	#define D_DIK_MAIL								(0xEC)
	#define D_DIK_MEDIASELECT						(0xED)

	#define D_DIK_BACKSPACE							D_DIK_BACK
	#define D_DIK_NUMPADSTAR						D_DIK_MULTIPLY
	#define D_DIK_LALT								D_DIK_LMENU
	#define D_DIK_CAPSLOCK							D_DIK_CAPITAL
	#define D_DIK_NUMPADMINUS						D_DIK_SUBTRACT
	#define D_DIK_NUMPADPLUS						D_DIK_ADD
	#define D_DIK_NUMPADPERIOD						D_DIK_DECIMAL
	#define D_DIK_NUMPADSLASH						D_DIK_DIVIDE
	#define D_DIK_RALT								D_DIK_RMENU
	#define D_DIK_UPARROW							D_DIK_UP
	#define D_DIK_PGUP								D_DIK_PRIOR
	#define D_DIK_LEFTARROW							D_DIK_LEFT
	#define D_DIK_RIGHTARROW						D_DIK_RIGHT
	#define D_DIK_DOWNARROW							D_DIK_DOWN
	#define D_DIK_PGDN								D_DIK_NEXT

	#define D_DI_DEGREES							(100)
	#define D_DI_FFNOMINALMAX						(10000)
	#define D_DI_SECONDS							(1000000)

	#define D_DIEFF_OBJECTIDS						(0x00000001)
	#define D_DIEFF_OBJECTOFFSETS					(0x00000002)
	#define D_DIEFF_CARTESIAN						(0x00000010)
	#define D_DIEFF_POLAR							(0x00000020)
	#define D_DIEFF_SPHERICAL						(0x00000040)

	#define D_DIJOFS_BUTTON(n)						(FIELD_OFFSET(D_DIJOYSTATE, rgbButtons) + (n))

	#define D_DIEP_DURATION							(0x00000001)
	#define D_DIEP_SAMPLEPERIOD						(0x00000002)
	#define D_DIEP_GAIN								(0x00000004)
	#define D_DIEP_TRIGGERBUTTON					(0x00000008)
	#define D_DIEP_TRIGGERREPEATINTERVAL			(0x00000010)
	#define D_DIEP_AXES								(0x00000020)
	#define D_DIEP_DIRECTION						(0x00000040)
	#define D_DIEP_ENVELOPE							(0x00000080)
	#define D_DIEP_TYPESPECIFICPARAMS				(0x00000100)
	#define D_DIEP_START							(0x20000000)
	#define D_DIEP_NORESTART						(0x40000000)
	#define D_DIEP_NODOWNLOAD						(0x80000000)
	#define D_DIEB_NOTRIGGER						(0xFFFFFFFF)

	#define D_DIEFT_ALL								(0x00000000)
	#define D_DIEFT_CONSTANTFORCE					(0x00000001)
	#define D_DIEFT_RAMPFORCE						(0x00000002)
	#define D_DIEFT_PERIODIC						(0x00000003)
	#define D_DIEFT_CONDITION						(0x00000004)
	#define D_DIEFT_CUSTOMFORCE						(0x00000005)
	#define D_DIEFT_HARDWARE						(0x000000FF)
	#define D_DIEFT_FFATTACK						(0x00000200)
	#define D_DIEFT_FFFADE							(0x00000400)
	#define D_DIEFT_SATURATION						(0x00000800)
	#define D_DIEFT_POSNEGCOEFFICIENTS				(0x00001000)
	#define D_DIEFT_POSNEGSATURATION				(0x00002000)
	#define D_DIEFT_DEADBAND						(0x00004000)
	#define D_DIEFT_STARTDELAY						(0x00008000)

	#ifndef UNICODE
		typedef struct D_DIDEVICEOBJECTINSTANCE
		{
			DWORD   dwSize;
			GUID    guidType;
			DWORD   dwOfs;
			DWORD   dwType;
			DWORD   dwFlags;
			CHAR    tszName[MAX_PATH];
//		#if(DIRECTINPUT_VERSION >= 0x0500)
			DWORD   dwFFMaxForce;
			DWORD   dwFFForceResolution;
			WORD    wCollectionNumber;
			WORD    wDesignatorIndex;
			WORD    wUsagePage;
			WORD    wUsage;
			DWORD   dwDimension;
			WORD    wExponent;
			WORD    wReportId;
//		#endif
		} D_DIDEVICEOBJECTINSTANCE;
	#else
		typedef struct D_DIDEVICEOBJECTINSTANCE
		{
			DWORD   dwSize;
			GUID    guidType;
			DWORD   dwOfs;
			DWORD   dwType;
			DWORD   dwFlags;
			WCHAR   tszName[MAX_PATH];
//		#if(DIRECTINPUT_VERSION >= 0x0500)
			DWORD   dwFFMaxForce;
			DWORD   dwFFForceResolution;
			WORD    wCollectionNumber;
			WORD    wDesignatorIndex;
			WORD    wUsagePage;
			WORD    wUsage;
			DWORD   dwDimension;
			WORD    wExponent;
			WORD    wReportId;
//		#endif
		} D_DIDEVICEOBJECTINSTANCE;
	#endif

	#ifndef UNICODE
		typedef struct D_DIDEVICEINSTANCE
		{
			DWORD									dwSize;
			GUID									guidInstance;
			GUID									guidProduct;
			DWORD									dwDevType;
			CHAR									tszInstanceName[MAX_PATH];
			CHAR									tszProductName[MAX_PATH];
//		#if (DIRECTINPUT_VERSION >= 0x0500)
			GUID									guidFFDriver;
			WORD									wUsagePage;
			WORD									wUsage;
//		#endif
		} D_DIDEVICEINSTANCE ;
	#else
		typedef struct tagD_DIDEVICEINSTANCE
		{
			DWORD									dwSize;
			GUID									guidInstance;
			GUID									guidProduct;
			DWORD									dwDevType;
			WCHAR									tszInstanceName[MAX_PATH];
			WCHAR									tszProductName[MAX_PATH];
//		#if (DIRECTINPUT_VERSION >= 0x0500)
			GUID									guidFFDriver;
			WORD									wUsagePage;
			WORD									wUsage;
//		#endif
		} D_DIDEVICEINSTANCE ;
	#endif

	typedef struct tagD_DIPROPHEADER
	{
		DWORD										dwSize;
		DWORD										dwHeaderSize;
		DWORD										dwObj;
		DWORD										dwHow;
	} D_DIPROPHEADER ;

	typedef struct tagD_DIPROPRANGE
	{
		D_DIPROPHEADER 								diph;
		LONG										lMin;
		LONG										lMax;
	} D_DIPROPRANGE ;

	typedef struct tagD_DIPROPDWORD
	{
		D_DIPROPHEADER 								diph;
		DWORD										dwData;
	} D_DIPROPDWORD ;

	typedef struct tagD_DIDEVICEOBJECTDATA_DX8
	{
		DWORD										dwOfs;
		DWORD										dwData;
		DWORD										dwTimeStamp;
		DWORD										dwSequence;
		UINT_PTR									uAppData;
	} D_DIDEVICEOBJECTDATA_DX8 ;

	typedef struct tagD_DIDEVICEOBJECTDATA_DX7
	{
		DWORD										dwOfs;
		DWORD										dwData;
		DWORD										dwTimeStamp;
		DWORD										dwSequence;
	} D_DIDEVICEOBJECTDATA_DX7 ;

	typedef struct tagD_DIJOYSTATE
	{
		LONG										lX;
		LONG										lY;
		LONG										lZ;
		LONG										lRx;
		LONG										lRy;
		LONG										lRz;
		LONG										rglSlider[2];
		DWORD										rgdwPOV[4];
		BYTE										rgbButtons[32];
	} D_DIJOYSTATE ;

	typedef struct tagD_DIMOUSESTATE
	{
		LONG										lX;
		LONG										lY;
		LONG										lZ;
		BYTE										rgbButtons[4];
	} D_DIMOUSESTATE ;

	typedef struct tagD_DIMOUSESTATE2
	{
		LONG										lX;
		LONG										lY;
		LONG										lZ;
		BYTE										rgbButtons[8];
	} D_DIMOUSESTATE2 ;

	typedef struct tagD_DIOBJECTDATAFORMAT
	{
		const GUID *pguid;
		DWORD										dwOfs;
		DWORD										dwType;
		DWORD										dwFlags;
	} D_DIOBJECTDATAFORMAT ;

	typedef struct tagD_DIDATAFORMAT
	{
		DWORD										dwSize;
		DWORD										dwObjSize;
		DWORD										dwFlags;
		DWORD										dwDataSize;
		DWORD										dwNumObjs;
		D_DIOBJECTDATAFORMAT						*rgodf;
	} D_DIDATAFORMAT ;

	typedef struct tagD_DIDEVCAPS
	{
		DWORD										dwSize;
		DWORD										dwFlags;
		DWORD										dwDevType;
		DWORD										dwAxes;
		DWORD										dwButtons;
		DWORD										dwPOVs;
//	#if(DIRECTINPUT_VERSION >= 0x0500)
		DWORD										dwFFSamplePeriod;
		DWORD										dwFFMinTimeResolution;
		DWORD										dwFirmwareRevision;
		DWORD										dwHardwareRevision;
		DWORD										dwFFDriverVersion;
//	#endif
	} D_DIDEVCAPS ;

	typedef struct tagD_DIPERIODIC
	{
		DWORD										dwMagnitude;
		LONG										lOffset;
		DWORD										dwPhase;
		DWORD										dwPeriod;
	} D_DIPERIODIC ;

	typedef struct tagD_DIENVELOPE
	{
		DWORD										dwSize;
		DWORD										dwAttackLevel;
		DWORD										dwAttackTime;
		DWORD										dwFadeLevel;
		DWORD										dwFadeTime;
	} D_DIENVELOPE;

	typedef struct tagD_DIEFFECT
	{
		DWORD										dwSize;
		DWORD										dwFlags;
		DWORD										dwDuration;
		DWORD										dwSamplePeriod;
		DWORD										dwGain;
		DWORD										dwTriggerButton;
		DWORD										dwTriggerRepeatInterval;
		DWORD										cAxes;
		DWORD										*rgdwAxes;
		LONG										*rglDirection;
		D_DIENVELOPE								*lpEnvelope;
		DWORD										cbTypeSpecificParams;
		LPVOID										lpvTypeSpecificParams;
//	#if(DIRECTINPUT_VERSION >= 0x0600)
		DWORD										dwStartDelay;
//	#endif
	} D_DIEFFECT ;

	typedef struct tagD_DIEFFECTINFOA
	{
		DWORD										dwSize;
		GUID										guid;
		DWORD										dwEffType;
		DWORD										dwStaticParams;
		DWORD										dwDynamicParams;
		CHAR										tszName[MAX_PATH];
	} D_DIEFFECTINFOA ;

	typedef struct tagD_DIEFFECTINFOW
	{
		DWORD										dwSize;
		GUID										guid;
		DWORD										dwEffType;
		DWORD										dwStaticParams;
		DWORD										dwDynamicParams;
		WCHAR										tszName[MAX_PATH];
	} D_DIEFFECTINFOW ;

	typedef struct tagD_DICONSTANTFORCE
	{
	    LONG  lMagnitude;
	} D_DICONSTANTFORCE ;

	typedef BOOL ( FAR PASCAL * LPD_DIENUMDEVICESCALLBACK )( const D_DIDEVICEINSTANCE *, LPVOID ) ;
	typedef BOOL ( FAR PASCAL * LPD_DIENUMEFFECTSCALLBACKA)( const D_DIEFFECTINFOA *, LPVOID);
	typedef BOOL ( FAR PASCAL * LPD_DIENUMEFFECTSCALLBACKW)( const D_DIEFFECTINFOW *, LPVOID);

#ifdef UNICODE
	#define LPD_DIENUMEFFECTSCALLBACK				LPD_DIENUMEFFECTSCALLBACKW
	#define D_DIEFFECTINFO							D_DIEFFECTINFOW
#else
	#define LPD_DIENUMEFFECTSCALLBACK				LPD_DIENUMEFFECTSCALLBACKA
	#define D_DIEFFECTINFO							D_DIEFFECTINFOA
#endif
	class D_IDirectInputDevice : public IUnknown
	{
	public :
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// GetCapabilities( LPDIDEVCAPS ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// EnumObjects( LPDIENUMDEVICEOBJECTSCALLBACK, LPVOID,DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// GetProperty( REFGUID, LPDIPROPHEADER ) = 0 ;
		virtual HRESULT __stdcall SetProperty				( REFGUID, const D_DIPROPHEADER * ) = 0 ;
		virtual HRESULT __stdcall Acquire					( void ) = 0 ;
		virtual HRESULT __stdcall Unacquire					( void ) = 0 ;
		virtual HRESULT __stdcall GetDeviceState			( DWORD, LPVOID ) = 0 ;
		virtual HRESULT __stdcall GetDeviceData				( DWORD, void * /*D_DIDEVICEOBJECTDATA * */, LPDWORD, DWORD ) = 0 ;
		virtual HRESULT __stdcall SetDataFormat				( const D_DIDATAFORMAT * ) = 0 ;
		virtual HRESULT __stdcall SetEventNotification		( HANDLE ) = 0 ;
		virtual HRESULT __stdcall SetCooperativeLevel		( HWND, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// GetObjectInfo( LPDIDEVICEOBJECTINSTANCE, DWORD, DWORD ) = 0 ;
		virtual HRESULT __stdcall GetDeviceInfo				( D_DIDEVICEINSTANCE * ) = 0 ;
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// RunControlPanel( HWND, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// Initialize( HINSTANCE, DWORD, REFGUID ) = 0 ;
	};

	class D_IDirectInputDevice2 : public D_IDirectInputDevice
	{
	public :
		virtual HRESULT __stdcall CreateEffect				( REFGUID, const D_DIEFFECT *, class D_IDirectInputEffect **, LPUNKNOWN ) = 0 ;
		virtual HRESULT __stdcall EnumEffects				( LPD_DIENUMEFFECTSCALLBACK, LPVOID,DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse08					( void ) = 0 ;				// GetEffectInfo( LPDIEFFECTINFOA,REFGUID ) = 0 ;
		virtual HRESULT __stdcall NonUse09					( void ) = 0 ;				// GetForceFeedbackState( LPDWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse10					( void ) = 0 ;				// SendForceFeedbackCommand( DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse11					( void ) = 0 ;				// EnumCreatedEffectObjects( LPDIENUMCREATEDEFFECTOBJECTSCALLBACK,LPVOID,DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse12					( void ) = 0 ;				// Escape( LPDIEFFESCAPE ) = 0 ;
		virtual HRESULT __stdcall Poll						( void ) = 0 ;
		virtual HRESULT __stdcall NonUse13					( void ) = 0 ;				// SendDeviceData( DWORD,LPCDIDEVICEOBJECTDATA,LPDWORD,DWORD ) = 0 ;
	} ;

	class D_IDirectInputDevice7 : public D_IDirectInputDevice2
	{
	public :
		virtual HRESULT __stdcall NonUse14					( void ) = 0 ;				// EnumEffectsInFile( LPCSTR,LPDIENUMEFFECTSINFILECALLBACK,LPVOID,DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse15					( void ) = 0 ;				// WriteEffectToFile( LPCSTR,DWORD,LPDIFILEEFFECT,DWORD ) = 0 ;
	} ;

	class D_IDirectInputDevice8 : public D_IDirectInputDevice7
	{
	public :
		virtual HRESULT __stdcall NonUse16					( void ) = 0 ;				// BuildActionMap( LPDIACTIONFORMATW,LPCWSTR,DWORD) = 0 ;
		virtual HRESULT __stdcall NonUse17					( void ) = 0 ;				// SetActionMap( LPDIACTIONFORMATW,LPCWSTR,DWORD) = 0 ;
		virtual HRESULT __stdcall NonUse18					( void ) = 0 ;				// GetImageInfo( LPDIDEVICEIMAGEINFOHEADERW) = 0 ;
	};

	class D_IDirectInput8 : public IUnknown
	{
	public :
		virtual HRESULT __stdcall CreateDevice				( REFGUID, D_IDirectInputDevice8 **, LPUNKNOWN ) = 0 ;
		virtual HRESULT __stdcall EnumDevices				( DWORD, LPD_DIENUMDEVICESCALLBACK, LPVOID, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// GetDeviceStatus( REFGUID) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// RunControlPanel( HWND,DWORD) = 0 ;
		virtual HRESULT __stdcall Initialize				( HINSTANCE, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// FindDevice( REFGUID,LPCWSTR,LPGUID) = 0 ;
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// EnumDevicesBySemantics( LPCWSTR,LPDIACTIONFORMATW,LPDIENUMDEVICESBYSEMANTICSCBW,LPVOID,DWORD) = 0 ;
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// ConfigureDevices( LPDICONFIGUREDEVICESCALLBACK,LPDICONFIGUREDEVICESPARAMSW,DWORD,LPVOID) = 0 ;
	};

	class D_IDirectInput : public IUnknown
	{
	public :
		virtual HRESULT __stdcall CreateDevice				( REFGUID, D_IDirectInputDevice **, LPUNKNOWN ) = 0 ;
		virtual HRESULT __stdcall EnumDevices				( DWORD, LPD_DIENUMDEVICESCALLBACK, LPVOID, DWORD ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// GetDeviceStatus( REFGUID ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// RunControlPanel( HWND, DWORD ) = 0 ;
		virtual HRESULT __stdcall Initialize				( HINSTANCE, DWORD ) = 0 ;
	};

	class D_IDirectInput2 : public D_IDirectInput
	{
	public :
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// FindDevice( REFGUID, LPCSTR, LPGUID ) = 0 ;
	} ;

	class D_IDirectInput7 : public D_IDirectInput2
	{
	public :
		virtual HRESULT __stdcall CreateDeviceEx			( REFGUID, REFIID, LPVOID *, IUnknown * ) = 0 ;
	} ;

	class D_IDirectInputEffect : public IUnknown
	{
	public :
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// Initialize( HINSTANCE,DWORD,REFGUID ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// GetEffectGuid( LPGUID ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// GetParameters( LPDIEFFECT,DWORD ) = 0 ;
		virtual HRESULT __stdcall SetParameters				( const D_DIEFFECT *, DWORD ) = 0 ;
		virtual HRESULT __stdcall Start						( DWORD,DWORD ) = 0 ;
		virtual HRESULT __stdcall Stop						( void ) = 0 ;
		virtual HRESULT __stdcall GetEffectStatus			( LPDWORD ) = 0 ;
		virtual HRESULT __stdcall Download					( void ) = 0 ;
		virtual HRESULT __stdcall Unload					( void ) = 0 ;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// Escape( LPDIEFFESCAPE ) = 0 ;
	};

#endif /* DX_USE_DIRECTX_SDK_FILE */


#ifndef DX_NON_MOVIE

	// ÇcÇâÇíÇÖÇÉÇîÇrÇàÇèÇó -------------------------------------------------------

	#define D_AMMSF_NOGRAPHTHREAD					(0x1)
	#define D_AMMSF_ADDDEFAULTRENDERER				(0x1)
	#define D_DDSFF_PROGRESSIVERENDER				(0x1)

	#define D_MS_SUCCESS_CODE(x)					MAKE_HRESULT(0, FACILITY_ITF, x)
	#define D_MS_S_PENDING							D_MS_SUCCESS_CODE(1)

	#define D_EC_COMPLETE							(0x01)
	#define D_EC_USERABORT							(0x02)
	#define D_EC_ERRORABORT							(0x03)
	#define D_EC_STREAM_ERROR_STOPPED				(0x06)
	#define D_EC_STREAM_ERROR_STILLPLAYING			(0x07)
	#define D_EC_ERROR_STILLPLAYING					(0x08)
	#define D_EC_END_OF_SEGMENT						(0x1C)

	typedef enum tagD_AM_SEEKING_SEEKINGFLAGS
	{
		D_AM_SEEKING_NoPositioning					= 0,
		D_AM_SEEKING_AbsolutePositioning			= 0x1,
		D_AM_SEEKING_RelativePositioning			= 0x2,
		D_AM_SEEKING_IncrementalPositioning			= 0x3,
		D_AM_SEEKING_PositioningBitsMask			= 0x3,
		D_AM_SEEKING_SeekToKeyFrame					= 0x4,
		D_AM_SEEKING_ReturnTime						= 0x8,
		D_AM_SEEKING_Segment						= 0x10,
		D_AM_SEEKING_NoFlush						= 0x20
	} D_AM_SEEKING_SEEKING_FLAGS ;

	typedef enum tagD_STREAM_STATE
	{
		D_STREAMSTATE_STOP 							= 0,
		D_STREAMSTATE_RUN							= 1
	} D_STREAM_STATE ;

	typedef enum tagD_STREAM_TYPE
	{
		D_STREAMTYPE_READ							= 0,
		D_STREAMTYPE_WRITE 							= 1,
		D_STREAMTYPE_TRANSFORM 						= 2
	} D_STREAM_TYPE ;

	typedef enum tagD_FILTERSTATE
	{
		D_State_Stopped 							= 0,
		D_State_Paused 								= D_State_Stopped + 1,
		D_State_Running 							= D_State_Paused + 1
	} D_FILTER_STATE ;

	typedef DWORD 									D_OAEVENT ;
	typedef DWORD 									D_OAHWND ;
	typedef UINT 									D_MMRESULT ;
	typedef REFGUID 								D_REFMSPID ;
	typedef GUID 									D_MSPID ;
	typedef LONGLONG 								D_STREAM_TIME ;
	typedef	long									D_OAFilterState ;

	typedef void ( __stdcall *D_PAPCFUNC )( DWORD_PTR dwParam );

	class D_IFilterGraph : public IUnknown
	{
	public:
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// AddFilter( IBaseFilter *pFilter, LPCWSTR pName) = 0;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// RemoveFilter( IBaseFilter *pFilter) = 0;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// EnumFilters( IEnumFilters **ppEnum) = 0;	
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// FindFilterByName( LPCWSTR pName, IBaseFilter **ppFilter) = 0;
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// ConnectDirect( IPin *ppinOut, IPin *ppinIn, const AM_MEDIA_TYPE *pmt) = 0;
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// Reconnect( IPin *ppin) = 0;
		virtual HRESULT __stdcall NonUse06					( void ) = 0 ;				// Disconnect( IPin *ppin) = 0;
		virtual HRESULT __stdcall NonUse07					( void ) = 0 ;				// SetDefaultSyncSource( void) = 0;
		
	};

	class D_IGraphBuilder : public D_IFilterGraph
	{
	public:
		virtual HRESULT __stdcall NonUse08					( void ) = 0 ;				// Connect( IPin *ppinOut, IPin *ppinIn) = 0;
		virtual HRESULT __stdcall NonUse09					( void ) = 0 ;				// Render( IPin *ppinOut) = 0;
		virtual HRESULT __stdcall RenderFile				( LPCWSTR lpcwstrFile, LPCWSTR lpcwstrPlayList ) = 0;
		virtual HRESULT __stdcall NonUse10					( void ) = 0 ;				// AddSourceFilter( LPCWSTR lpcwstrFileName, LPCWSTR lpcwstrFilterName, IBaseFilter **ppFilter) = 0;
		virtual HRESULT __stdcall NonUse11					( void ) = 0 ;				// SetLogFile( DWORD_PTR hFile) = 0;
		virtual HRESULT __stdcall NonUse12					( void ) = 0 ;				// Abort( void ) = 0;
		virtual HRESULT __stdcall NonUse13					( void ) = 0 ;				// ShouldOperationContinue( void ) = 0;
	};

	class D_IStreamSample : public IUnknown
	{
	public:
		virtual HRESULT __stdcall GetMediaStream			( class D_IMediaStream **ppMediaStream ) = 0 ;
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// GetSampleTimes( STREAM_TIME *pStartTime, STREAM_TIME *pEndTime, STREAM_TIME *pCurrentTime) = 0;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// SetSampleTimes( const STREAM_TIME *pStartTime, const STREAM_TIME *pEndTime ) = 0;
		virtual HRESULT __stdcall Update					( DWORD dwFlags, HANDLE hEvent, D_PAPCFUNC pfnAPC, DWORD_PTR dwAPCData) = 0;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// CompletionStatus( DWORD dwFlags, DWORD dwMilliseconds) = 0;
	};

	class D_IDirectDrawStreamSample : public D_IStreamSample
	{
	public:
		virtual HRESULT __stdcall GetSurface				( D_IDirectDrawSurface **ppDirectDrawSurface, RECT *pRect) = 0;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// SetRect( const RECT *pRect) = 0;
	};

	class D_IMultiMediaStream : public IUnknown
	{
	public:
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// GetInformation( DWORD *pdwFlags, STREAM_TYPE *pStreamType ) = 0 ;
		virtual HRESULT __stdcall GetMediaStream			( D_REFMSPID idPurpose, class D_IMediaStream **ppMediaStream ) = 0 ;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// EnumMediaStreams( long Index, class IMediaStream **ppMediaStream ) = 0 ;
		virtual HRESULT __stdcall GetState					( D_STREAM_STATE *pCurrentState ) = 0 ;
		virtual HRESULT __stdcall SetState					( D_STREAM_STATE NewState ) = 0 ;
		virtual HRESULT __stdcall GetTime					( D_STREAM_TIME *pCurrentTime ) = 0 ;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// GetDuration( STREAM_TIME *pDuration ) = 0 ;
		virtual HRESULT __stdcall Seek						( D_STREAM_TIME SeekTime ) = 0 ;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// GetEndOfStreamEventHandle( HANDLE *phEOS ) = 0 ;
	} ;

	class D_IAMMultiMediaStream : public D_IMultiMediaStream
	{
	public:
		virtual HRESULT __stdcall Initialize				( D_STREAM_TYPE StreamType, DWORD dwFlags, D_IGraphBuilder *pFilterGraph) = 0;	
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// GetFilterGraph( IGraphBuilder **ppGraphBuilder) = 0;	
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// GetFilter( IMediaStreamFilter **ppFilter) = 0;	
		virtual HRESULT __stdcall AddMediaStream			( IUnknown *pStreamObject, const D_MSPID *PurposeId, DWORD dwFlags, D_IMediaStream **ppNewStream) = 0;
		virtual HRESULT __stdcall OpenFile					( LPCWSTR pszFileName, DWORD dwFlags) = 0;
		virtual HRESULT __stdcall NonUse06					( void ) = 0 ;				// OpenMoniker( IBindCtx *pCtx, IMoniker *pMoniker, DWORD dwFlags) = 0;
		virtual HRESULT __stdcall NonUse07					( void ) = 0 ;				// Render( DWORD dwFlags) = 0;
	} ;

	class D_IMediaStream : public IUnknown
	{
	public:
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// GetMultiMediaStream( IMultiMediaStream **ppMultiMediaStream) = 0;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// GetInformation( MSPID *pPurposeId, STREAM_TYPE *pType) = 0;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// SetSameFormat( IMediaStream *pStreamThatHasDesiredFormat, DWORD dwFlags) = 0;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// AllocateSample( DWORD dwFlags, IStreamSample **ppSample) = 0;
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// CreateSharedSample( IStreamSample *pExistingSample, DWORD dwFlags, IStreamSample **ppNewSample) = 0;
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// SendEndOfStream( DWORD dwFlags) = 0;
	};

	class D_IAMMediaStream : public D_IMediaStream
	{
	public:
		virtual HRESULT __stdcall NonUse06					( void ) = 0 ;				// Initialize( IUnknown *pSourceObject, DWORD dwFlags, REFMSPID PurposeId, const STREAM_TYPE StreamType) = 0;
		virtual HRESULT __stdcall NonUse07					( void ) = 0 ;				// SetState( FILTER_STATE State) = 0;
		virtual HRESULT __stdcall NonUse08					( void ) = 0 ;				// JoinAMMultiMediaStream( IAMMultiMediaStream *pAMMultiMediaStream) = 0;
		virtual HRESULT __stdcall NonUse09					( void ) = 0 ;				// JoinFilter( IMediaStreamFilter *pMediaStreamFilter) = 0;
		virtual HRESULT __stdcall NonUse10					( void ) = 0 ;				// JoinFilterGraph( IFilterGraph *pFilterGraph) = 0;
	};

	class D_IDirectDrawMediaStream : public D_IMediaStream
	{
	public:
		virtual HRESULT __stdcall GetFormat					( D_DDSURFACEDESC *pDDSDCurrent, D_IDirectDrawPalette **ppDirectDrawPalette, D_DDSURFACEDESC *pDDSDDesired, DWORD *pdwFlags) = 0;
		virtual HRESULT __stdcall NonUse06					( void ) = 0 ;				// SetFormat( const DDSURFACEDESC *pDDSurfaceDesc, IDirectDrawPalette *pDirectDrawPalette) = 0;
		virtual HRESULT __stdcall NonUse07					( void ) = 0 ;				// GetDirectDraw( IDirectDraw **ppDirectDraw) = 0;
		virtual HRESULT __stdcall NonUse08					( void ) = 0 ;				// SetDirectDraw( IDirectDraw *pDirectDraw) = 0;
		virtual HRESULT __stdcall CreateSample				( D_IDirectDrawSurface *pSurface, const RECT *pRect, DWORD dwFlags, class D_IDirectDrawStreamSample **ppSample) = 0;
		virtual HRESULT __stdcall GetTimePerFrame			( D_STREAM_TIME *pFrameTime) = 0;
	};

	class D_IMediaControl : public IDispatch
	{
	public:
		virtual HRESULT __stdcall Run						( void ) = 0 ;
		virtual HRESULT __stdcall Pause						( void ) = 0 ;
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// Stop( void ) = 0;
		virtual HRESULT __stdcall GetState					( LONG msTimeout, D_OAFilterState *pfs ) = 0;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// RenderFile( BSTR strFilename) = 0;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// AddSourceFilter( BSTR strFilename, IDispatch **ppUnk) = 0;
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// get_FilterCollection( IDispatch **ppUnk) = 0;
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// get_RegFilterCollection( IDispatch **ppUnk) = 0;
		virtual HRESULT __stdcall StopWhenReady				( void ) = 0 ;
	};

	class D_IMediaSeeking : public IUnknown
	{
	public:
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// GetCapabilities( DWORD *pCapabilities) = 0;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// CheckCapabilities( DWORD *pCapabilities) = 0;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// IsFormatSupported( const GUID *pFormat) = 0;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// QueryPreferredFormat( GUID *pFormat) = 0;
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// GetTimeFormat( GUID *pFormat) = 0;
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// IsUsingTimeFormat( const GUID *pFormat) = 0;
		virtual HRESULT __stdcall SetTimeFormat				( const GUID *pFormat ) = 0;
		virtual HRESULT __stdcall NonUse07					( void ) = 0 ;				// GetDuration( LONGLONG *pDuration) = 0;
		virtual HRESULT __stdcall GetStopPosition			( LONGLONG *pStop) = 0;
		virtual HRESULT __stdcall GetCurrentPosition		( LONGLONG *pCurrent) = 0;
		virtual HRESULT __stdcall NonUse08					( void ) = 0 ;				// ConvertTimeFormat( LONGLONG *pTarget, const GUID *pTargetFormat, LONGLONG Source, const GUID *pSourceFormat) = 0;
		virtual HRESULT __stdcall SetPositions				( LONGLONG *pCurrent, DWORD dwCurrentFlags, LONGLONG *pStop, DWORD dwStopFlags) = 0;
		virtual HRESULT __stdcall NonUse09					( void ) = 0 ;				// GetPositions( LONGLONG *pCurrent, LONGLONG *pStop) = 0;
		virtual HRESULT __stdcall NonUse10					( void ) = 0 ;				// GetAvailable( LONGLONG *pEarliest, LONGLONG *pLatest) = 0;
		virtual HRESULT __stdcall NonUse11					( void ) = 0 ;				// SetRate( double dRate) = 0;
		virtual HRESULT __stdcall NonUse12					( void ) = 0 ;				// GetRate( double *pdRate) = 0;
		virtual HRESULT __stdcall NonUse13					( void ) = 0 ;				// GetPreroll( LONGLONG *pllPreroll) = 0;
	};

	class D_IBasicAudio : public IDispatch
	{
	public:
		virtual	HRESULT __stdcall put_Volume				( long lVolume) = 0;
		virtual	HRESULT __stdcall NonUse00					( void ) = 0 ;				// get_Volume( long *plVolume) = 0;
		virtual	HRESULT __stdcall NonUse01					( void ) = 0 ;				// put_Balance( long lBalance) = 0;
		virtual	HRESULT __stdcall NonUse02					( void ) = 0 ;				// get_Balance( long *plBalance) = 0;
	};

	class D_IMediaEvent : public IDispatch
	{
	public:
		virtual HRESULT __stdcall NonUse00					( void ) = 0 ;				// GetEventHandle( OAEVENT *hEvent ) = 0 ;
		virtual HRESULT __stdcall GetEvent					( long *lEventCode, LONG_PTR *lParam1, LONG_PTR *lParam2, long msTimeout) = 0;
		virtual HRESULT __stdcall NonUse01					( void ) = 0 ;				// WaitForCompletion( long msTimeout, long *pEvCode) = 0;
		virtual HRESULT __stdcall NonUse02					( void ) = 0 ;				// CancelDefaultHandling( long lEvCode) = 0;
		virtual HRESULT __stdcall NonUse03					( void ) = 0 ;				// RestoreDefaultHandling( long lEvCode) = 0;
		virtual HRESULT __stdcall FreeEventParams			( long lEvCode, LONG_PTR lParam1, LONG_PTR lParam2) = 0;
	};

	class D_IMediaEventEx : public D_IMediaEvent
	{
	public:
		virtual HRESULT __stdcall SetNotifyWindow			( D_OAHWND hwnd, long lMsg, LONG_PTR lInstanceData) = 0;
		virtual HRESULT __stdcall NonUse04					( void ) = 0 ;				// SetNotifyFlags( long lNoNotifyFlags) = 0;
		virtual HRESULT __stdcall NonUse05					( void ) = 0 ;				// GetNotifyFlags( long *lplNoNotifyFlags) = 0;
	};

#endif	/* DX_NON_MOVIE */

#endif	/* __DXDIRECTX_H__ */


